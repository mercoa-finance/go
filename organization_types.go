// This file was auto-generated by Fern from our API Definition.

package mercoa

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/mercoa-finance/go/internal"
)

type BankPaymentRailRequest struct {
	Name                     *string              `json:"name,omitempty" url:"name,omitempty"`
	Active                   bool                 `json:"active" url:"active"`
	AvailableDeliveryMethods []BankDeliveryMethod `json:"availableDeliveryMethods,omitempty" url:"availableDeliveryMethods,omitempty"`
	DefaultDeliveryMethod    *BankDeliveryMethod  `json:"defaultDeliveryMethod,omitempty" url:"defaultDeliveryMethod,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankPaymentRailRequest) GetName() *string {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *BankPaymentRailRequest) GetActive() bool {
	if b == nil {
		return false
	}
	return b.Active
}

func (b *BankPaymentRailRequest) GetAvailableDeliveryMethods() []BankDeliveryMethod {
	if b == nil {
		return nil
	}
	return b.AvailableDeliveryMethods
}

func (b *BankPaymentRailRequest) GetDefaultDeliveryMethod() *BankDeliveryMethod {
	if b == nil {
		return nil
	}
	return b.DefaultDeliveryMethod
}

func (b *BankPaymentRailRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankPaymentRailRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler BankPaymentRailRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BankPaymentRailRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankPaymentRailRequest) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BankPaymentRailResponse struct {
	// unused
	Name                     string               `json:"name" url:"name"`
	Active                   bool                 `json:"active" url:"active"`
	AvailableDeliveryMethods []BankDeliveryMethod `json:"availableDeliveryMethods,omitempty" url:"availableDeliveryMethods,omitempty"`
	DefaultDeliveryMethod    BankDeliveryMethod   `json:"defaultDeliveryMethod" url:"defaultDeliveryMethod"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankPaymentRailResponse) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BankPaymentRailResponse) GetActive() bool {
	if b == nil {
		return false
	}
	return b.Active
}

func (b *BankPaymentRailResponse) GetAvailableDeliveryMethods() []BankDeliveryMethod {
	if b == nil {
		return nil
	}
	return b.AvailableDeliveryMethods
}

func (b *BankPaymentRailResponse) GetDefaultDeliveryMethod() BankDeliveryMethod {
	if b == nil {
		return ""
	}
	return b.DefaultDeliveryMethod
}

func (b *BankPaymentRailResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankPaymentRailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BankPaymentRailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BankPaymentRailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankPaymentRailResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BusinessOnboardingOptionsRequest struct {
	TermsOfService                  *OnboardingOptionRequest `json:"termsOfService,omitempty" url:"termsOfService,omitempty"`
	Email                           *OnboardingOptionRequest `json:"email,omitempty" url:"email,omitempty"`
	Name                            *OnboardingOptionRequest `json:"name,omitempty" url:"name,omitempty"`
	Address                         *OnboardingOptionRequest `json:"address,omitempty" url:"address,omitempty"`
	Phone                           *OnboardingOptionRequest `json:"phone,omitempty" url:"phone,omitempty"`
	TenNinetyNine                   *OnboardingOptionRequest `json:"tenNinetyNine,omitempty" url:"tenNinetyNine,omitempty"`
	W9                              *OnboardingOptionRequest `json:"w9,omitempty" url:"w9,omitempty"`
	BankStatement                   *OnboardingOptionRequest `json:"bankStatement,omitempty" url:"bankStatement,omitempty"`
	Type                            *OnboardingOptionRequest `json:"type,omitempty" url:"type,omitempty"`
	DoingBusinessAs                 *OnboardingOptionRequest `json:"doingBusinessAs,omitempty" url:"doingBusinessAs,omitempty"`
	Ein                             *OnboardingOptionRequest `json:"ein,omitempty" url:"ein,omitempty"`
	Mcc                             *OnboardingOptionRequest `json:"mcc,omitempty" url:"mcc,omitempty"`
	FormationDate                   *OnboardingOptionRequest `json:"formationDate,omitempty" url:"formationDate,omitempty"`
	Website                         *OnboardingOptionRequest `json:"website,omitempty" url:"website,omitempty"`
	Description                     *OnboardingOptionRequest `json:"description,omitempty" url:"description,omitempty"`
	Representatives                 *OnboardingOptionRequest `json:"representatives,omitempty" url:"representatives,omitempty"`
	Logo                            *OnboardingOptionRequest `json:"logo,omitempty" url:"logo,omitempty"`
	AverageTransactionSize          *OnboardingOptionRequest `json:"averageTransactionSize,omitempty" url:"averageTransactionSize,omitempty"`
	AverageMonthlyTransactionVolume *OnboardingOptionRequest `json:"averageMonthlyTransactionVolume,omitempty" url:"averageMonthlyTransactionVolume,omitempty"`
	MaxTransactionSize              *OnboardingOptionRequest `json:"maxTransactionSize,omitempty" url:"maxTransactionSize,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BusinessOnboardingOptionsRequest) GetTermsOfService() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.TermsOfService
}

func (b *BusinessOnboardingOptionsRequest) GetEmail() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Email
}

func (b *BusinessOnboardingOptionsRequest) GetName() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *BusinessOnboardingOptionsRequest) GetAddress() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Address
}

func (b *BusinessOnboardingOptionsRequest) GetPhone() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Phone
}

func (b *BusinessOnboardingOptionsRequest) GetTenNinetyNine() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.TenNinetyNine
}

func (b *BusinessOnboardingOptionsRequest) GetW9() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.W9
}

func (b *BusinessOnboardingOptionsRequest) GetBankStatement() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.BankStatement
}

func (b *BusinessOnboardingOptionsRequest) GetType() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Type
}

func (b *BusinessOnboardingOptionsRequest) GetDoingBusinessAs() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.DoingBusinessAs
}

func (b *BusinessOnboardingOptionsRequest) GetEin() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Ein
}

func (b *BusinessOnboardingOptionsRequest) GetMcc() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Mcc
}

func (b *BusinessOnboardingOptionsRequest) GetFormationDate() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.FormationDate
}

func (b *BusinessOnboardingOptionsRequest) GetWebsite() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Website
}

func (b *BusinessOnboardingOptionsRequest) GetDescription() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Description
}

func (b *BusinessOnboardingOptionsRequest) GetRepresentatives() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Representatives
}

func (b *BusinessOnboardingOptionsRequest) GetLogo() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.Logo
}

func (b *BusinessOnboardingOptionsRequest) GetAverageTransactionSize() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.AverageTransactionSize
}

func (b *BusinessOnboardingOptionsRequest) GetAverageMonthlyTransactionVolume() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.AverageMonthlyTransactionVolume
}

func (b *BusinessOnboardingOptionsRequest) GetMaxTransactionSize() *OnboardingOptionRequest {
	if b == nil {
		return nil
	}
	return b.MaxTransactionSize
}

func (b *BusinessOnboardingOptionsRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessOnboardingOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessOnboardingOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessOnboardingOptionsRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessOnboardingOptionsRequest) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BusinessOnboardingOptionsResponse struct {
	TermsOfService                  *OnboardingOptionResponse `json:"termsOfService,omitempty" url:"termsOfService,omitempty"`
	Email                           *OnboardingOptionResponse `json:"email,omitempty" url:"email,omitempty"`
	Name                            *OnboardingOptionResponse `json:"name,omitempty" url:"name,omitempty"`
	Address                         *OnboardingOptionResponse `json:"address,omitempty" url:"address,omitempty"`
	Phone                           *OnboardingOptionResponse `json:"phone,omitempty" url:"phone,omitempty"`
	TenNinetyNine                   *OnboardingOptionResponse `json:"tenNinetyNine,omitempty" url:"tenNinetyNine,omitempty"`
	W9                              *OnboardingOptionResponse `json:"w9,omitempty" url:"w9,omitempty"`
	BankStatement                   *OnboardingOptionResponse `json:"bankStatement,omitempty" url:"bankStatement,omitempty"`
	Type                            *OnboardingOptionResponse `json:"type,omitempty" url:"type,omitempty"`
	DoingBusinessAs                 *OnboardingOptionResponse `json:"doingBusinessAs,omitempty" url:"doingBusinessAs,omitempty"`
	Ein                             *OnboardingOptionResponse `json:"ein,omitempty" url:"ein,omitempty"`
	Mcc                             *OnboardingOptionResponse `json:"mcc,omitempty" url:"mcc,omitempty"`
	FormationDate                   *OnboardingOptionResponse `json:"formationDate,omitempty" url:"formationDate,omitempty"`
	Website                         *OnboardingOptionResponse `json:"website,omitempty" url:"website,omitempty"`
	Description                     *OnboardingOptionResponse `json:"description,omitempty" url:"description,omitempty"`
	Representatives                 *OnboardingOptionResponse `json:"representatives,omitempty" url:"representatives,omitempty"`
	Logo                            *OnboardingOptionResponse `json:"logo,omitempty" url:"logo,omitempty"`
	AverageTransactionSize          *OnboardingOptionResponse `json:"averageTransactionSize,omitempty" url:"averageTransactionSize,omitempty"`
	AverageMonthlyTransactionVolume *OnboardingOptionResponse `json:"averageMonthlyTransactionVolume,omitempty" url:"averageMonthlyTransactionVolume,omitempty"`
	MaxTransactionSize              *OnboardingOptionResponse `json:"maxTransactionSize,omitempty" url:"maxTransactionSize,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BusinessOnboardingOptionsResponse) GetTermsOfService() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.TermsOfService
}

func (b *BusinessOnboardingOptionsResponse) GetEmail() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Email
}

func (b *BusinessOnboardingOptionsResponse) GetName() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *BusinessOnboardingOptionsResponse) GetAddress() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Address
}

func (b *BusinessOnboardingOptionsResponse) GetPhone() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Phone
}

func (b *BusinessOnboardingOptionsResponse) GetTenNinetyNine() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.TenNinetyNine
}

func (b *BusinessOnboardingOptionsResponse) GetW9() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.W9
}

func (b *BusinessOnboardingOptionsResponse) GetBankStatement() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.BankStatement
}

func (b *BusinessOnboardingOptionsResponse) GetType() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Type
}

func (b *BusinessOnboardingOptionsResponse) GetDoingBusinessAs() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.DoingBusinessAs
}

func (b *BusinessOnboardingOptionsResponse) GetEin() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Ein
}

func (b *BusinessOnboardingOptionsResponse) GetMcc() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Mcc
}

func (b *BusinessOnboardingOptionsResponse) GetFormationDate() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.FormationDate
}

func (b *BusinessOnboardingOptionsResponse) GetWebsite() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Website
}

func (b *BusinessOnboardingOptionsResponse) GetDescription() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Description
}

func (b *BusinessOnboardingOptionsResponse) GetRepresentatives() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Representatives
}

func (b *BusinessOnboardingOptionsResponse) GetLogo() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.Logo
}

func (b *BusinessOnboardingOptionsResponse) GetAverageTransactionSize() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.AverageTransactionSize
}

func (b *BusinessOnboardingOptionsResponse) GetAverageMonthlyTransactionVolume() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.AverageMonthlyTransactionVolume
}

func (b *BusinessOnboardingOptionsResponse) GetMaxTransactionSize() *OnboardingOptionResponse {
	if b == nil {
		return nil
	}
	return b.MaxTransactionSize
}

func (b *BusinessOnboardingOptionsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessOnboardingOptionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessOnboardingOptionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessOnboardingOptionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessOnboardingOptionsResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CheckPaymentRailRequest struct {
	Name                     *string               `json:"name,omitempty" url:"name,omitempty"`
	Active                   bool                  `json:"active" url:"active"`
	AvailableDeliveryMethods []CheckDeliveryMethod `json:"availableDeliveryMethods,omitempty" url:"availableDeliveryMethods,omitempty"`
	DefaultDeliveryMethod    *CheckDeliveryMethod  `json:"defaultDeliveryMethod,omitempty" url:"defaultDeliveryMethod,omitempty"`
	// If true, invoices default to printing the invoice description (noteToSelf) on the check note.
	PrintDescription *bool `json:"printDescription,omitempty" url:"printDescription,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckPaymentRailRequest) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CheckPaymentRailRequest) GetActive() bool {
	if c == nil {
		return false
	}
	return c.Active
}

func (c *CheckPaymentRailRequest) GetAvailableDeliveryMethods() []CheckDeliveryMethod {
	if c == nil {
		return nil
	}
	return c.AvailableDeliveryMethods
}

func (c *CheckPaymentRailRequest) GetDefaultDeliveryMethod() *CheckDeliveryMethod {
	if c == nil {
		return nil
	}
	return c.DefaultDeliveryMethod
}

func (c *CheckPaymentRailRequest) GetPrintDescription() *bool {
	if c == nil {
		return nil
	}
	return c.PrintDescription
}

func (c *CheckPaymentRailRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckPaymentRailRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckPaymentRailRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckPaymentRailRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckPaymentRailRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckPaymentRailResponse struct {
	// unused
	Name                     string                `json:"name" url:"name"`
	Active                   bool                  `json:"active" url:"active"`
	AvailableDeliveryMethods []CheckDeliveryMethod `json:"availableDeliveryMethods,omitempty" url:"availableDeliveryMethods,omitempty"`
	DefaultDeliveryMethod    CheckDeliveryMethod   `json:"defaultDeliveryMethod" url:"defaultDeliveryMethod"`
	PrintDescription         bool                  `json:"printDescription" url:"printDescription"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckPaymentRailResponse) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CheckPaymentRailResponse) GetActive() bool {
	if c == nil {
		return false
	}
	return c.Active
}

func (c *CheckPaymentRailResponse) GetAvailableDeliveryMethods() []CheckDeliveryMethod {
	if c == nil {
		return nil
	}
	return c.AvailableDeliveryMethods
}

func (c *CheckPaymentRailResponse) GetDefaultDeliveryMethod() CheckDeliveryMethod {
	if c == nil {
		return ""
	}
	return c.DefaultDeliveryMethod
}

func (c *CheckPaymentRailResponse) GetPrintDescription() bool {
	if c == nil {
		return false
	}
	return c.PrintDescription
}

func (c *CheckPaymentRailResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckPaymentRailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckPaymentRailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckPaymentRailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckPaymentRailResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodatProviderRequest struct {
	APIKey string `json:"apiKey" url:"apiKey"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CodatProviderRequest) GetAPIKey() string {
	if c == nil {
		return ""
	}
	return c.APIKey
}

func (c *CodatProviderRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodatProviderRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CodatProviderRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodatProviderRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodatProviderRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodatProviderResponse struct {
	HasAPIKey bool `json:"hasApiKey" url:"hasApiKey"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CodatProviderResponse) GetHasAPIKey() bool {
	if c == nil {
		return false
	}
	return c.HasAPIKey
}

func (c *CodatProviderResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodatProviderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CodatProviderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodatProviderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodatProviderResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ColorSchemeRequest struct {
	PrimaryColor        *string `json:"primaryColor,omitempty" url:"primaryColor,omitempty"`
	SecondaryColor      *string `json:"secondaryColor,omitempty" url:"secondaryColor,omitempty"`
	LogoBackgroundColor *string `json:"logoBackgroundColor,omitempty" url:"logoBackgroundColor,omitempty"`
	RoundedCorners      *int    `json:"roundedCorners,omitempty" url:"roundedCorners,omitempty"`
	FontFamily          *string `json:"fontFamily,omitempty" url:"fontFamily,omitempty"`
	FontSize            *string `json:"fontSize,omitempty" url:"fontSize,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ColorSchemeRequest) GetPrimaryColor() *string {
	if c == nil {
		return nil
	}
	return c.PrimaryColor
}

func (c *ColorSchemeRequest) GetSecondaryColor() *string {
	if c == nil {
		return nil
	}
	return c.SecondaryColor
}

func (c *ColorSchemeRequest) GetLogoBackgroundColor() *string {
	if c == nil {
		return nil
	}
	return c.LogoBackgroundColor
}

func (c *ColorSchemeRequest) GetRoundedCorners() *int {
	if c == nil {
		return nil
	}
	return c.RoundedCorners
}

func (c *ColorSchemeRequest) GetFontFamily() *string {
	if c == nil {
		return nil
	}
	return c.FontFamily
}

func (c *ColorSchemeRequest) GetFontSize() *string {
	if c == nil {
		return nil
	}
	return c.FontSize
}

func (c *ColorSchemeRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ColorSchemeRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ColorSchemeRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ColorSchemeRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ColorSchemeRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ColorSchemeResponse struct {
	PrimaryColor        *string `json:"primaryColor,omitempty" url:"primaryColor,omitempty"`
	SecondaryColor      *string `json:"secondaryColor,omitempty" url:"secondaryColor,omitempty"`
	LogoBackgroundColor *string `json:"logoBackgroundColor,omitempty" url:"logoBackgroundColor,omitempty"`
	RoundedCorners      *int    `json:"roundedCorners,omitempty" url:"roundedCorners,omitempty"`
	FontFamily          *string `json:"fontFamily,omitempty" url:"fontFamily,omitempty"`
	FontSize            *string `json:"fontSize,omitempty" url:"fontSize,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ColorSchemeResponse) GetPrimaryColor() *string {
	if c == nil {
		return nil
	}
	return c.PrimaryColor
}

func (c *ColorSchemeResponse) GetSecondaryColor() *string {
	if c == nil {
		return nil
	}
	return c.SecondaryColor
}

func (c *ColorSchemeResponse) GetLogoBackgroundColor() *string {
	if c == nil {
		return nil
	}
	return c.LogoBackgroundColor
}

func (c *ColorSchemeResponse) GetRoundedCorners() *int {
	if c == nil {
		return nil
	}
	return c.RoundedCorners
}

func (c *ColorSchemeResponse) GetFontFamily() *string {
	if c == nil {
		return nil
	}
	return c.FontFamily
}

func (c *ColorSchemeResponse) GetFontSize() *string {
	if c == nil {
		return nil
	}
	return c.FontSize
}

func (c *ColorSchemeResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ColorSchemeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ColorSchemeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ColorSchemeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ColorSchemeResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CommonOnboardingOptionsRequest struct {
	TermsOfService *OnboardingOptionRequest `json:"termsOfService,omitempty" url:"termsOfService,omitempty"`
	Email          *OnboardingOptionRequest `json:"email,omitempty" url:"email,omitempty"`
	Name           *OnboardingOptionRequest `json:"name,omitempty" url:"name,omitempty"`
	Address        *OnboardingOptionRequest `json:"address,omitempty" url:"address,omitempty"`
	Phone          *OnboardingOptionRequest `json:"phone,omitempty" url:"phone,omitempty"`
	TenNinetyNine  *OnboardingOptionRequest `json:"tenNinetyNine,omitempty" url:"tenNinetyNine,omitempty"`
	W9             *OnboardingOptionRequest `json:"w9,omitempty" url:"w9,omitempty"`
	BankStatement  *OnboardingOptionRequest `json:"bankStatement,omitempty" url:"bankStatement,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CommonOnboardingOptionsRequest) GetTermsOfService() *OnboardingOptionRequest {
	if c == nil {
		return nil
	}
	return c.TermsOfService
}

func (c *CommonOnboardingOptionsRequest) GetEmail() *OnboardingOptionRequest {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CommonOnboardingOptionsRequest) GetName() *OnboardingOptionRequest {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CommonOnboardingOptionsRequest) GetAddress() *OnboardingOptionRequest {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CommonOnboardingOptionsRequest) GetPhone() *OnboardingOptionRequest {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CommonOnboardingOptionsRequest) GetTenNinetyNine() *OnboardingOptionRequest {
	if c == nil {
		return nil
	}
	return c.TenNinetyNine
}

func (c *CommonOnboardingOptionsRequest) GetW9() *OnboardingOptionRequest {
	if c == nil {
		return nil
	}
	return c.W9
}

func (c *CommonOnboardingOptionsRequest) GetBankStatement() *OnboardingOptionRequest {
	if c == nil {
		return nil
	}
	return c.BankStatement
}

func (c *CommonOnboardingOptionsRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CommonOnboardingOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CommonOnboardingOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommonOnboardingOptionsRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommonOnboardingOptionsRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CommonOnboardingOptionsResponse struct {
	TermsOfService *OnboardingOptionResponse `json:"termsOfService,omitempty" url:"termsOfService,omitempty"`
	Email          *OnboardingOptionResponse `json:"email,omitempty" url:"email,omitempty"`
	Name           *OnboardingOptionResponse `json:"name,omitempty" url:"name,omitempty"`
	Address        *OnboardingOptionResponse `json:"address,omitempty" url:"address,omitempty"`
	Phone          *OnboardingOptionResponse `json:"phone,omitempty" url:"phone,omitempty"`
	TenNinetyNine  *OnboardingOptionResponse `json:"tenNinetyNine,omitempty" url:"tenNinetyNine,omitempty"`
	W9             *OnboardingOptionResponse `json:"w9,omitempty" url:"w9,omitempty"`
	BankStatement  *OnboardingOptionResponse `json:"bankStatement,omitempty" url:"bankStatement,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CommonOnboardingOptionsResponse) GetTermsOfService() *OnboardingOptionResponse {
	if c == nil {
		return nil
	}
	return c.TermsOfService
}

func (c *CommonOnboardingOptionsResponse) GetEmail() *OnboardingOptionResponse {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CommonOnboardingOptionsResponse) GetName() *OnboardingOptionResponse {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CommonOnboardingOptionsResponse) GetAddress() *OnboardingOptionResponse {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CommonOnboardingOptionsResponse) GetPhone() *OnboardingOptionResponse {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CommonOnboardingOptionsResponse) GetTenNinetyNine() *OnboardingOptionResponse {
	if c == nil {
		return nil
	}
	return c.TenNinetyNine
}

func (c *CommonOnboardingOptionsResponse) GetW9() *OnboardingOptionResponse {
	if c == nil {
		return nil
	}
	return c.W9
}

func (c *CommonOnboardingOptionsResponse) GetBankStatement() *OnboardingOptionResponse {
	if c == nil {
		return nil
	}
	return c.BankStatement
}

func (c *CommonOnboardingOptionsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CommonOnboardingOptionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CommonOnboardingOptionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommonOnboardingOptionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommonOnboardingOptionsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomPaymentRailRequest struct {
	Name     *string `json:"name,omitempty" url:"name,omitempty"`
	Active   bool    `json:"active" url:"active"`
	SchemaID string  `json:"schemaId" url:"schemaId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CustomPaymentRailRequest) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CustomPaymentRailRequest) GetActive() bool {
	if c == nil {
		return false
	}
	return c.Active
}

func (c *CustomPaymentRailRequest) GetSchemaID() string {
	if c == nil {
		return ""
	}
	return c.SchemaID
}

func (c *CustomPaymentRailRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomPaymentRailRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomPaymentRailRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomPaymentRailRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomPaymentRailRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomPaymentRailResponse struct {
	// unused
	Name     string `json:"name" url:"name"`
	Active   bool   `json:"active" url:"active"`
	SchemaID string `json:"schemaId" url:"schemaId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CustomPaymentRailResponse) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CustomPaymentRailResponse) GetActive() bool {
	if c == nil {
		return false
	}
	return c.Active
}

func (c *CustomPaymentRailResponse) GetSchemaID() string {
	if c == nil {
		return ""
	}
	return c.SchemaID
}

func (c *CustomPaymentRailResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomPaymentRailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomPaymentRailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomPaymentRailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomPaymentRailResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type EmailProviderRequest struct {
	Sender                  *EmailSenderRequest `json:"sender,omitempty" url:"sender,omitempty"`
	InboxDomain             string              `json:"inboxDomain" url:"inboxDomain"`
	AlternativeInboxDomains []string            `json:"alternativeInboxDomains,omitempty" url:"alternativeInboxDomains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderRequest) GetSender() *EmailSenderRequest {
	if e == nil {
		return nil
	}
	return e.Sender
}

func (e *EmailProviderRequest) GetInboxDomain() string {
	if e == nil {
		return ""
	}
	return e.InboxDomain
}

func (e *EmailProviderRequest) GetAlternativeInboxDomains() []string {
	if e == nil {
		return nil
	}
	return e.AlternativeInboxDomains
}

func (e *EmailProviderRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EmailProviderResponse struct {
	Sender                  *EmailSenderResponse `json:"sender,omitempty" url:"sender,omitempty"`
	InboxDomain             string               `json:"inboxDomain" url:"inboxDomain"`
	AlternativeInboxDomains []string             `json:"alternativeInboxDomains,omitempty" url:"alternativeInboxDomains,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailProviderResponse) GetSender() *EmailSenderResponse {
	if e == nil {
		return nil
	}
	return e.Sender
}

func (e *EmailProviderResponse) GetInboxDomain() string {
	if e == nil {
		return ""
	}
	return e.InboxDomain
}

func (e *EmailProviderResponse) GetAlternativeInboxDomains() []string {
	if e == nil {
		return nil
	}
	return e.AlternativeInboxDomains
}

func (e *EmailProviderResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailProviderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailProviderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailProviderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailProviderResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EmailSenderProvider string

const (
	EmailSenderProviderNone        EmailSenderProvider = "none"
	EmailSenderProviderSendgrid    EmailSenderProvider = "sendgrid"
	EmailSenderProviderSes         EmailSenderProvider = "ses"
	EmailSenderProviderResend      EmailSenderProvider = "resend"
	EmailSenderProviderCloudmailin EmailSenderProvider = "cloudmailin"
)

func NewEmailSenderProviderFromString(s string) (EmailSenderProvider, error) {
	switch s {
	case "none":
		return EmailSenderProviderNone, nil
	case "sendgrid":
		return EmailSenderProviderSendgrid, nil
	case "ses":
		return EmailSenderProviderSes, nil
	case "resend":
		return EmailSenderProviderResend, nil
	case "cloudmailin":
		return EmailSenderProviderCloudmailin, nil
	}
	var t EmailSenderProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmailSenderProvider) Ptr() *EmailSenderProvider {
	return &e
}

type EmailSenderRequest struct {
	Provider  EmailSenderProvider `json:"provider" url:"provider"`
	FromEmail string              `json:"fromEmail" url:"fromEmail"`
	FromName  string              `json:"fromName" url:"fromName"`
	APIKey    *string             `json:"apiKey,omitempty" url:"apiKey,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailSenderRequest) GetProvider() EmailSenderProvider {
	if e == nil {
		return ""
	}
	return e.Provider
}

func (e *EmailSenderRequest) GetFromEmail() string {
	if e == nil {
		return ""
	}
	return e.FromEmail
}

func (e *EmailSenderRequest) GetFromName() string {
	if e == nil {
		return ""
	}
	return e.FromName
}

func (e *EmailSenderRequest) GetAPIKey() *string {
	if e == nil {
		return nil
	}
	return e.APIKey
}

func (e *EmailSenderRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailSenderRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailSenderRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailSenderRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailSenderRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EmailSenderResponse struct {
	Provider  EmailSenderProvider `json:"provider" url:"provider"`
	FromEmail string              `json:"fromEmail" url:"fromEmail"`
	FromName  string              `json:"fromName" url:"fromName"`
	HasAPIKey bool                `json:"hasApiKey" url:"hasApiKey"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailSenderResponse) GetProvider() EmailSenderProvider {
	if e == nil {
		return ""
	}
	return e.Provider
}

func (e *EmailSenderResponse) GetFromEmail() string {
	if e == nil {
		return ""
	}
	return e.FromEmail
}

func (e *EmailSenderResponse) GetFromName() string {
	if e == nil {
		return ""
	}
	return e.FromName
}

func (e *EmailSenderResponse) GetHasAPIKey() bool {
	if e == nil {
		return false
	}
	return e.HasAPIKey
}

func (e *EmailSenderResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailSenderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailSenderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailSenderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailSenderResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExternalAccountingSystemProviderRequest struct {
	Type   string
	None   *CodatProviderRequest
	Codat  *CodatProviderRequest
	Rutter *RutterProviderRequest
}

func (e *ExternalAccountingSystemProviderRequest) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ExternalAccountingSystemProviderRequest) GetNone() *CodatProviderRequest {
	if e == nil {
		return nil
	}
	return e.None
}

func (e *ExternalAccountingSystemProviderRequest) GetCodat() *CodatProviderRequest {
	if e == nil {
		return nil
	}
	return e.Codat
}

func (e *ExternalAccountingSystemProviderRequest) GetRutter() *RutterProviderRequest {
	if e == nil {
		return nil
	}
	return e.Rutter
}

func (e *ExternalAccountingSystemProviderRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "none":
		value := new(CodatProviderRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.None = value
	case "codat":
		value := new(CodatProviderRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Codat = value
	case "rutter":
		value := new(RutterProviderRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rutter = value
	}
	return nil
}

func (e ExternalAccountingSystemProviderRequest) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.None != nil {
		return internal.MarshalJSONWithExtraProperty(e.None, "type", "none")
	}
	if e.Codat != nil {
		return internal.MarshalJSONWithExtraProperty(e.Codat, "type", "codat")
	}
	if e.Rutter != nil {
		return internal.MarshalJSONWithExtraProperty(e.Rutter, "type", "rutter")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExternalAccountingSystemProviderRequestVisitor interface {
	VisitNone(*CodatProviderRequest) error
	VisitCodat(*CodatProviderRequest) error
	VisitRutter(*RutterProviderRequest) error
}

func (e *ExternalAccountingSystemProviderRequest) Accept(visitor ExternalAccountingSystemProviderRequestVisitor) error {
	if e.None != nil {
		return visitor.VisitNone(e.None)
	}
	if e.Codat != nil {
		return visitor.VisitCodat(e.Codat)
	}
	if e.Rutter != nil {
		return visitor.VisitRutter(e.Rutter)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ExternalAccountingSystemProviderRequest) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.None != nil {
		fields = append(fields, "none")
	}
	if e.Codat != nil {
		fields = append(fields, "codat")
	}
	if e.Rutter != nil {
		fields = append(fields, "rutter")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

type ExternalAccountingSystemProviderResponse struct {
	Type   string
	None   *CodatProviderResponse
	Codat  *CodatProviderResponse
	Rutter *RutterProviderResponse
}

func (e *ExternalAccountingSystemProviderResponse) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ExternalAccountingSystemProviderResponse) GetNone() *CodatProviderResponse {
	if e == nil {
		return nil
	}
	return e.None
}

func (e *ExternalAccountingSystemProviderResponse) GetCodat() *CodatProviderResponse {
	if e == nil {
		return nil
	}
	return e.Codat
}

func (e *ExternalAccountingSystemProviderResponse) GetRutter() *RutterProviderResponse {
	if e == nil {
		return nil
	}
	return e.Rutter
}

func (e *ExternalAccountingSystemProviderResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "none":
		value := new(CodatProviderResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.None = value
	case "codat":
		value := new(CodatProviderResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Codat = value
	case "rutter":
		value := new(RutterProviderResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rutter = value
	}
	return nil
}

func (e ExternalAccountingSystemProviderResponse) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.None != nil {
		return internal.MarshalJSONWithExtraProperty(e.None, "type", "none")
	}
	if e.Codat != nil {
		return internal.MarshalJSONWithExtraProperty(e.Codat, "type", "codat")
	}
	if e.Rutter != nil {
		return internal.MarshalJSONWithExtraProperty(e.Rutter, "type", "rutter")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExternalAccountingSystemProviderResponseVisitor interface {
	VisitNone(*CodatProviderResponse) error
	VisitCodat(*CodatProviderResponse) error
	VisitRutter(*RutterProviderResponse) error
}

func (e *ExternalAccountingSystemProviderResponse) Accept(visitor ExternalAccountingSystemProviderResponseVisitor) error {
	if e.None != nil {
		return visitor.VisitNone(e.None)
	}
	if e.Codat != nil {
		return visitor.VisitCodat(e.Codat)
	}
	if e.Rutter != nil {
		return visitor.VisitRutter(e.Rutter)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ExternalAccountingSystemProviderResponse) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.None != nil {
		fields = append(fields, "none")
	}
	if e.Codat != nil {
		fields = append(fields, "codat")
	}
	if e.Rutter != nil {
		fields = append(fields, "rutter")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

type GenericPaymentRailRequest struct {
	Name   *string `json:"name,omitempty" url:"name,omitempty"`
	Active bool    `json:"active" url:"active"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GenericPaymentRailRequest) GetName() *string {
	if g == nil {
		return nil
	}
	return g.Name
}

func (g *GenericPaymentRailRequest) GetActive() bool {
	if g == nil {
		return false
	}
	return g.Active
}

func (g *GenericPaymentRailRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenericPaymentRailRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenericPaymentRailRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenericPaymentRailRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenericPaymentRailRequest) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenericPaymentRailResponse struct {
	// unused
	Name   string `json:"name" url:"name"`
	Active bool   `json:"active" url:"active"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GenericPaymentRailResponse) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GenericPaymentRailResponse) GetActive() bool {
	if g == nil {
		return false
	}
	return g.Active
}

func (g *GenericPaymentRailResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenericPaymentRailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenericPaymentRailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenericPaymentRailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenericPaymentRailResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type IndividualOnboardingOptionsRequest struct {
	TermsOfService *OnboardingOptionRequest `json:"termsOfService,omitempty" url:"termsOfService,omitempty"`
	Email          *OnboardingOptionRequest `json:"email,omitempty" url:"email,omitempty"`
	Name           *OnboardingOptionRequest `json:"name,omitempty" url:"name,omitempty"`
	Address        *OnboardingOptionRequest `json:"address,omitempty" url:"address,omitempty"`
	Phone          *OnboardingOptionRequest `json:"phone,omitempty" url:"phone,omitempty"`
	TenNinetyNine  *OnboardingOptionRequest `json:"tenNinetyNine,omitempty" url:"tenNinetyNine,omitempty"`
	W9             *OnboardingOptionRequest `json:"w9,omitempty" url:"w9,omitempty"`
	BankStatement  *OnboardingOptionRequest `json:"bankStatement,omitempty" url:"bankStatement,omitempty"`
	DateOfBirth    *OnboardingOptionRequest `json:"dateOfBirth,omitempty" url:"dateOfBirth,omitempty"`
	Ssn            *OnboardingOptionRequest `json:"ssn,omitempty" url:"ssn,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IndividualOnboardingOptionsRequest) GetTermsOfService() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.TermsOfService
}

func (i *IndividualOnboardingOptionsRequest) GetEmail() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.Email
}

func (i *IndividualOnboardingOptionsRequest) GetName() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *IndividualOnboardingOptionsRequest) GetAddress() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.Address
}

func (i *IndividualOnboardingOptionsRequest) GetPhone() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.Phone
}

func (i *IndividualOnboardingOptionsRequest) GetTenNinetyNine() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.TenNinetyNine
}

func (i *IndividualOnboardingOptionsRequest) GetW9() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.W9
}

func (i *IndividualOnboardingOptionsRequest) GetBankStatement() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.BankStatement
}

func (i *IndividualOnboardingOptionsRequest) GetDateOfBirth() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.DateOfBirth
}

func (i *IndividualOnboardingOptionsRequest) GetSsn() *OnboardingOptionRequest {
	if i == nil {
		return nil
	}
	return i.Ssn
}

func (i *IndividualOnboardingOptionsRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IndividualOnboardingOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualOnboardingOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualOnboardingOptionsRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualOnboardingOptionsRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IndividualOnboardingOptionsResponse struct {
	TermsOfService *OnboardingOptionResponse `json:"termsOfService,omitempty" url:"termsOfService,omitempty"`
	Email          *OnboardingOptionResponse `json:"email,omitempty" url:"email,omitempty"`
	Name           *OnboardingOptionResponse `json:"name,omitempty" url:"name,omitempty"`
	Address        *OnboardingOptionResponse `json:"address,omitempty" url:"address,omitempty"`
	Phone          *OnboardingOptionResponse `json:"phone,omitempty" url:"phone,omitempty"`
	TenNinetyNine  *OnboardingOptionResponse `json:"tenNinetyNine,omitempty" url:"tenNinetyNine,omitempty"`
	W9             *OnboardingOptionResponse `json:"w9,omitempty" url:"w9,omitempty"`
	BankStatement  *OnboardingOptionResponse `json:"bankStatement,omitempty" url:"bankStatement,omitempty"`
	DateOfBirth    *OnboardingOptionResponse `json:"dateOfBirth,omitempty" url:"dateOfBirth,omitempty"`
	Ssn            *OnboardingOptionResponse `json:"ssn,omitempty" url:"ssn,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IndividualOnboardingOptionsResponse) GetTermsOfService() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.TermsOfService
}

func (i *IndividualOnboardingOptionsResponse) GetEmail() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.Email
}

func (i *IndividualOnboardingOptionsResponse) GetName() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *IndividualOnboardingOptionsResponse) GetAddress() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.Address
}

func (i *IndividualOnboardingOptionsResponse) GetPhone() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.Phone
}

func (i *IndividualOnboardingOptionsResponse) GetTenNinetyNine() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.TenNinetyNine
}

func (i *IndividualOnboardingOptionsResponse) GetW9() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.W9
}

func (i *IndividualOnboardingOptionsResponse) GetBankStatement() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.BankStatement
}

func (i *IndividualOnboardingOptionsResponse) GetDateOfBirth() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.DateOfBirth
}

func (i *IndividualOnboardingOptionsResponse) GetSsn() *OnboardingOptionResponse {
	if i == nil {
		return nil
	}
	return i.Ssn
}

func (i *IndividualOnboardingOptionsResponse) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IndividualOnboardingOptionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualOnboardingOptionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualOnboardingOptionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualOnboardingOptionsResponse) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InvoiceNotificationConfigurationRequest struct {
	// The URL that the email will link to.
	URL string `json:"url" url:"url"`
	// The subject of the email. If not provided, the default subject will be used.
	Subject *string `json:"subject,omitempty" url:"subject,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceNotificationConfigurationRequest) GetURL() string {
	if i == nil {
		return ""
	}
	return i.URL
}

func (i *InvoiceNotificationConfigurationRequest) GetSubject() *string {
	if i == nil {
		return nil
	}
	return i.Subject
}

func (i *InvoiceNotificationConfigurationRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceNotificationConfigurationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceNotificationConfigurationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceNotificationConfigurationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceNotificationConfigurationRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InvoiceNotificationConfigurationResponse struct {
	// The URL that the email will link to.
	URL string `json:"url" url:"url"`
	// The subject of the email. If not provided, the default subject will be used.
	Subject *string          `json:"subject,omitempty" url:"subject,omitempty"`
	Type    NotificationType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceNotificationConfigurationResponse) GetURL() string {
	if i == nil {
		return ""
	}
	return i.URL
}

func (i *InvoiceNotificationConfigurationResponse) GetSubject() *string {
	if i == nil {
		return nil
	}
	return i.Subject
}

func (i *InvoiceNotificationConfigurationResponse) GetType() NotificationType {
	if i == nil {
		return ""
	}
	return i.Type
}

func (i *InvoiceNotificationConfigurationResponse) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceNotificationConfigurationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceNotificationConfigurationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceNotificationConfigurationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceNotificationConfigurationResponse) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type MetadataOcrRules struct {
	// Attempt to extract this field from reading the document. Only applicable to line item metadata fields. Defaults to false.
	ExtractFromDocument *bool `json:"extractFromDocument,omitempty" url:"extractFromDocument,omitempty"`
	// Attempt to predict this field from historical invoice metadata. Only applicable to line item metadata fields. Defaults to true.
	PredictFromHistory *bool `json:"predictFromHistory,omitempty" url:"predictFromHistory,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetadataOcrRules) GetExtractFromDocument() *bool {
	if m == nil {
		return nil
	}
	return m.ExtractFromDocument
}

func (m *MetadataOcrRules) GetPredictFromHistory() *bool {
	if m == nil {
		return nil
	}
	return m.PredictFromHistory
}

func (m *MetadataOcrRules) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataOcrRules) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataOcrRules
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataOcrRules(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataOcrRules) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetadataRegexValidationRule struct {
	// A regular expression that the value must match.
	Regex string `json:"regex" url:"regex"`
	// The error message to display if the value does not match the regular expression.
	ErrorMessage string `json:"errorMessage" url:"errorMessage"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetadataRegexValidationRule) GetRegex() string {
	if m == nil {
		return ""
	}
	return m.Regex
}

func (m *MetadataRegexValidationRule) GetErrorMessage() string {
	if m == nil {
		return ""
	}
	return m.ErrorMessage
}

func (m *MetadataRegexValidationRule) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataRegexValidationRule) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataRegexValidationRule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataRegexValidationRule(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataRegexValidationRule) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetadataSchema struct {
	Key         string  `json:"key" url:"key"`
	DisplayName string  `json:"displayName" url:"displayName"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Whether or not this field should be shown on line items. If true, this field will be shown on each line item. If false, the field will be shown on the invoice level. Defaults to false.
	LineItem *bool        `json:"lineItem,omitempty" url:"lineItem,omitempty"`
	Type     MetadataType `json:"type" url:"type"`
	// Whether or not multiple values are allowed for this field. Defaults to false. If true, the value will be a list of the specified type.
	AllowMultiple *bool `json:"allowMultiple,omitempty" url:"allowMultiple,omitempty"`
	// Validation rules are currently only supported for STRING types.
	ValidationRules *MetadataValidationRule `json:"validationRules,omitempty" url:"validationRules,omitempty"`
	// A list of conditional rules that determine whether or not this field should be shown. The field will only be shown if all of the conditions are met. If no conditions are specified, the field will always be shown.
	ShowConditions *MetadataShowConditions `json:"showConditions,omitempty" url:"showConditions,omitempty"`
	// A collection of rules that determine how this field is populated during OCR.
	OcrRules *MetadataOcrRules `json:"ocrRules,omitempty" url:"ocrRules,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetadataSchema) GetKey() string {
	if m == nil {
		return ""
	}
	return m.Key
}

func (m *MetadataSchema) GetDisplayName() string {
	if m == nil {
		return ""
	}
	return m.DisplayName
}

func (m *MetadataSchema) GetDescription() *string {
	if m == nil {
		return nil
	}
	return m.Description
}

func (m *MetadataSchema) GetLineItem() *bool {
	if m == nil {
		return nil
	}
	return m.LineItem
}

func (m *MetadataSchema) GetType() MetadataType {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MetadataSchema) GetAllowMultiple() *bool {
	if m == nil {
		return nil
	}
	return m.AllowMultiple
}

func (m *MetadataSchema) GetValidationRules() *MetadataValidationRule {
	if m == nil {
		return nil
	}
	return m.ValidationRules
}

func (m *MetadataSchema) GetShowConditions() *MetadataShowConditions {
	if m == nil {
		return nil
	}
	return m.ShowConditions
}

func (m *MetadataSchema) GetOcrRules() *MetadataOcrRules {
	if m == nil {
		return nil
	}
	return m.OcrRules
}

func (m *MetadataSchema) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataSchema) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetadataShowConditions struct {
	// Always hide this field. Useful for getting data from OCR and AI predictions that you don't want to show in the UI.
	AlwaysHide *bool `json:"alwaysHide,omitempty" url:"alwaysHide,omitempty"`
	// Show this field only if the entity has values set for the metadata key.
	HasOptions *bool `json:"hasOptions,omitempty" url:"hasOptions,omitempty"`
	// Show this field only if a document has been attached.
	HasDocument *bool `json:"hasDocument,omitempty" url:"hasDocument,omitempty"`
	// Show this field only if the invoice has no line items. Useful for showing a field that applies to the entire invoice but overridden by line items if present.
	HasNoLineItems *bool `json:"hasNoLineItems,omitempty" url:"hasNoLineItems,omitempty"`
	// Show this field only if the payment source type is in this list.
	PaymentSourceTypes []PaymentMethodType `json:"paymentSourceTypes,omitempty" url:"paymentSourceTypes,omitempty"`
	// Show this field only if the payment source schema ID is in this list of payment source schema IDs. This is only applicable if paymentSourceTypes contains CUSTOM.
	PaymentSourceCustomSchemaIDs []string `json:"paymentSourceCustomSchemaIds,omitempty" url:"paymentSourceCustomSchemaIds,omitempty"`
	// Show this field only if the payment destination type is in this list.
	PaymentDestinationTypes []PaymentMethodType `json:"paymentDestinationTypes,omitempty" url:"paymentDestinationTypes,omitempty"`
	// Show this field only if the payment destination schema ID is in this list of payment destination schema IDs. This is only applicable if paymentDestinationTypes contains CUSTOM.
	PaymentDestinationCustomSchemaIDs []string `json:"paymentDestinationCustomSchemaIds,omitempty" url:"paymentDestinationCustomSchemaIds,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetadataShowConditions) GetAlwaysHide() *bool {
	if m == nil {
		return nil
	}
	return m.AlwaysHide
}

func (m *MetadataShowConditions) GetHasOptions() *bool {
	if m == nil {
		return nil
	}
	return m.HasOptions
}

func (m *MetadataShowConditions) GetHasDocument() *bool {
	if m == nil {
		return nil
	}
	return m.HasDocument
}

func (m *MetadataShowConditions) GetHasNoLineItems() *bool {
	if m == nil {
		return nil
	}
	return m.HasNoLineItems
}

func (m *MetadataShowConditions) GetPaymentSourceTypes() []PaymentMethodType {
	if m == nil {
		return nil
	}
	return m.PaymentSourceTypes
}

func (m *MetadataShowConditions) GetPaymentSourceCustomSchemaIDs() []string {
	if m == nil {
		return nil
	}
	return m.PaymentSourceCustomSchemaIDs
}

func (m *MetadataShowConditions) GetPaymentDestinationTypes() []PaymentMethodType {
	if m == nil {
		return nil
	}
	return m.PaymentDestinationTypes
}

func (m *MetadataShowConditions) GetPaymentDestinationCustomSchemaIDs() []string {
	if m == nil {
		return nil
	}
	return m.PaymentDestinationCustomSchemaIDs
}

func (m *MetadataShowConditions) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataShowConditions) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataShowConditions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataShowConditions(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataShowConditions) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetadataType string

const (
	MetadataTypeString   MetadataType = "STRING"
	MetadataTypeNumber   MetadataType = "NUMBER"
	MetadataTypeDate     MetadataType = "DATE"
	MetadataTypeBoolean  MetadataType = "BOOLEAN"
	MetadataTypeKeyValue MetadataType = "KEY_VALUE"
)

func NewMetadataTypeFromString(s string) (MetadataType, error) {
	switch s {
	case "STRING":
		return MetadataTypeString, nil
	case "NUMBER":
		return MetadataTypeNumber, nil
	case "DATE":
		return MetadataTypeDate, nil
	case "BOOLEAN":
		return MetadataTypeBoolean, nil
	case "KEY_VALUE":
		return MetadataTypeKeyValue, nil
	}
	var t MetadataType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MetadataType) Ptr() *MetadataType {
	return &m
}

type MetadataValidationRule struct {
	Type  string
	Regex *MetadataRegexValidationRule
}

func (m *MetadataValidationRule) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

func (m *MetadataValidationRule) GetRegex() *MetadataRegexValidationRule {
	if m == nil {
		return nil
	}
	return m.Regex
}

func (m *MetadataValidationRule) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	m.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", m)
	}
	switch unmarshaler.Type {
	case "regex":
		value := new(MetadataRegexValidationRule)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		m.Regex = value
	}
	return nil
}

func (m MetadataValidationRule) MarshalJSON() ([]byte, error) {
	if err := m.validate(); err != nil {
		return nil, err
	}
	if m.Regex != nil {
		return internal.MarshalJSONWithExtraProperty(m.Regex, "type", "regex")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", m)
}

type MetadataValidationRuleVisitor interface {
	VisitRegex(*MetadataRegexValidationRule) error
}

func (m *MetadataValidationRule) Accept(visitor MetadataValidationRuleVisitor) error {
	if m.Regex != nil {
		return visitor.VisitRegex(m.Regex)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", m)
}

func (m *MetadataValidationRule) validate() error {
	if m == nil {
		return fmt.Errorf("type %T is nil", m)
	}
	var fields []string
	if m.Regex != nil {
		fields = append(fields, "regex")
	}
	if len(fields) == 0 {
		if m.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", m, m.Type)
		}
		return fmt.Errorf("type %T is empty", m)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", m, fields)
	}
	if m.Type != "" {
		field := fields[0]
		if m.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				m,
				m.Type,
				m,
			)
		}
	}
	return nil
}

type NotificationConfigurationRequest struct {
	NotificationType string
	Invoice          *InvoiceNotificationConfigurationRequest
}

func (n *NotificationConfigurationRequest) GetNotificationType() string {
	if n == nil {
		return ""
	}
	return n.NotificationType
}

func (n *NotificationConfigurationRequest) GetInvoice() *InvoiceNotificationConfigurationRequest {
	if n == nil {
		return nil
	}
	return n.Invoice
}

func (n *NotificationConfigurationRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		NotificationType string `json:"notificationType"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.NotificationType = unmarshaler.NotificationType
	if unmarshaler.NotificationType == "" {
		return fmt.Errorf("%T did not include discriminant notificationType", n)
	}
	switch unmarshaler.NotificationType {
	case "invoice":
		value := new(InvoiceNotificationConfigurationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Invoice = value
	}
	return nil
}

func (n NotificationConfigurationRequest) MarshalJSON() ([]byte, error) {
	if err := n.validate(); err != nil {
		return nil, err
	}
	if n.Invoice != nil {
		return internal.MarshalJSONWithExtraProperty(n.Invoice, "notificationType", "invoice")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NotificationConfigurationRequestVisitor interface {
	VisitInvoice(*InvoiceNotificationConfigurationRequest) error
}

func (n *NotificationConfigurationRequest) Accept(visitor NotificationConfigurationRequestVisitor) error {
	if n.Invoice != nil {
		return visitor.VisitInvoice(n.Invoice)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

func (n *NotificationConfigurationRequest) validate() error {
	if n == nil {
		return fmt.Errorf("type %T is nil", n)
	}
	var fields []string
	if n.Invoice != nil {
		fields = append(fields, "invoice")
	}
	if len(fields) == 0 {
		if n.NotificationType != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", n, n.NotificationType)
		}
		return fmt.Errorf("type %T is empty", n)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", n, fields)
	}
	if n.NotificationType != "" {
		field := fields[0]
		if n.NotificationType != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				n,
				n.NotificationType,
				n,
			)
		}
	}
	return nil
}

type NotificationConfigurationResponse struct {
	NotificationType string
	Invoice          *InvoiceNotificationConfigurationResponse
}

func (n *NotificationConfigurationResponse) GetNotificationType() string {
	if n == nil {
		return ""
	}
	return n.NotificationType
}

func (n *NotificationConfigurationResponse) GetInvoice() *InvoiceNotificationConfigurationResponse {
	if n == nil {
		return nil
	}
	return n.Invoice
}

func (n *NotificationConfigurationResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		NotificationType string `json:"notificationType"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.NotificationType = unmarshaler.NotificationType
	if unmarshaler.NotificationType == "" {
		return fmt.Errorf("%T did not include discriminant notificationType", n)
	}
	switch unmarshaler.NotificationType {
	case "invoice":
		value := new(InvoiceNotificationConfigurationResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Invoice = value
	}
	return nil
}

func (n NotificationConfigurationResponse) MarshalJSON() ([]byte, error) {
	if err := n.validate(); err != nil {
		return nil, err
	}
	if n.Invoice != nil {
		return internal.MarshalJSONWithExtraProperty(n.Invoice, "notificationType", "invoice")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NotificationConfigurationResponseVisitor interface {
	VisitInvoice(*InvoiceNotificationConfigurationResponse) error
}

func (n *NotificationConfigurationResponse) Accept(visitor NotificationConfigurationResponseVisitor) error {
	if n.Invoice != nil {
		return visitor.VisitInvoice(n.Invoice)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

func (n *NotificationConfigurationResponse) validate() error {
	if n == nil {
		return fmt.Errorf("type %T is nil", n)
	}
	var fields []string
	if n.Invoice != nil {
		fields = append(fields, "invoice")
	}
	if len(fields) == 0 {
		if n.NotificationType != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", n, n.NotificationType)
		}
		return fmt.Errorf("type %T is empty", n)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", n, fields)
	}
	if n.NotificationType != "" {
		field := fields[0]
		if n.NotificationType != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				n,
				n.NotificationType,
				n,
			)
		}
	}
	return nil
}

type NotificationEmailTemplateRequest struct {
	BackgroundStyle *string `json:"backgroundStyle,omitempty" url:"backgroundStyle,omitempty"`
	Header          *string `json:"header,omitempty" url:"header,omitempty"`
	Body            *string `json:"body,omitempty" url:"body,omitempty"`
	Signature       *string `json:"signature,omitempty" url:"signature,omitempty"`
	Footer          *string `json:"footer,omitempty" url:"footer,omitempty"`
	Button          *string `json:"button,omitempty" url:"button,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationEmailTemplateRequest) GetBackgroundStyle() *string {
	if n == nil {
		return nil
	}
	return n.BackgroundStyle
}

func (n *NotificationEmailTemplateRequest) GetHeader() *string {
	if n == nil {
		return nil
	}
	return n.Header
}

func (n *NotificationEmailTemplateRequest) GetBody() *string {
	if n == nil {
		return nil
	}
	return n.Body
}

func (n *NotificationEmailTemplateRequest) GetSignature() *string {
	if n == nil {
		return nil
	}
	return n.Signature
}

func (n *NotificationEmailTemplateRequest) GetFooter() *string {
	if n == nil {
		return nil
	}
	return n.Footer
}

func (n *NotificationEmailTemplateRequest) GetButton() *string {
	if n == nil {
		return nil
	}
	return n.Button
}

func (n *NotificationEmailTemplateRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationEmailTemplateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationEmailTemplateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationEmailTemplateRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationEmailTemplateRequest) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationEmailTemplateResponse struct {
	BackgroundStyle *string `json:"backgroundStyle,omitempty" url:"backgroundStyle,omitempty"`
	Header          *string `json:"header,omitempty" url:"header,omitempty"`
	Body            *string `json:"body,omitempty" url:"body,omitempty"`
	Signature       *string `json:"signature,omitempty" url:"signature,omitempty"`
	Footer          *string `json:"footer,omitempty" url:"footer,omitempty"`
	Button          *string `json:"button,omitempty" url:"button,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationEmailTemplateResponse) GetBackgroundStyle() *string {
	if n == nil {
		return nil
	}
	return n.BackgroundStyle
}

func (n *NotificationEmailTemplateResponse) GetHeader() *string {
	if n == nil {
		return nil
	}
	return n.Header
}

func (n *NotificationEmailTemplateResponse) GetBody() *string {
	if n == nil {
		return nil
	}
	return n.Body
}

func (n *NotificationEmailTemplateResponse) GetSignature() *string {
	if n == nil {
		return nil
	}
	return n.Signature
}

func (n *NotificationEmailTemplateResponse) GetFooter() *string {
	if n == nil {
		return nil
	}
	return n.Footer
}

func (n *NotificationEmailTemplateResponse) GetButton() *string {
	if n == nil {
		return nil
	}
	return n.Button
}

func (n *NotificationEmailTemplateResponse) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationEmailTemplateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationEmailTemplateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationEmailTemplateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationEmailTemplateResponse) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// How this field will be shown on the onboarding page.  If `show`, `edit`, or `required` are not specified, they will default to `false`. Note that `required` implies `edit`, and `edit` implies `show`.
type OnboardingOptionRequest struct {
	Show     *bool `json:"show,omitempty" url:"show,omitempty"`
	Edit     *bool `json:"edit,omitempty" url:"edit,omitempty"`
	Required *bool `json:"required,omitempty" url:"required,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OnboardingOptionRequest) GetShow() *bool {
	if o == nil {
		return nil
	}
	return o.Show
}

func (o *OnboardingOptionRequest) GetEdit() *bool {
	if o == nil {
		return nil
	}
	return o.Edit
}

func (o *OnboardingOptionRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *OnboardingOptionRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OnboardingOptionRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OnboardingOptionRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OnboardingOptionRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OnboardingOptionRequest) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// How this field will be shown on the onboarding page. Note that `required` implies `edit`, and `edit` implies `show`.
type OnboardingOptionResponse struct {
	Show     bool `json:"show" url:"show"`
	Edit     bool `json:"edit" url:"edit"`
	Required bool `json:"required" url:"required"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OnboardingOptionResponse) GetShow() bool {
	if o == nil {
		return false
	}
	return o.Show
}

func (o *OnboardingOptionResponse) GetEdit() bool {
	if o == nil {
		return false
	}
	return o.Edit
}

func (o *OnboardingOptionResponse) GetRequired() bool {
	if o == nil {
		return false
	}
	return o.Required
}

func (o *OnboardingOptionResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OnboardingOptionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler OnboardingOptionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OnboardingOptionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OnboardingOptionResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OnboardingOptionsRequest struct {
	EnableBusiness   *bool                               `json:"enableBusiness,omitempty" url:"enableBusiness,omitempty"`
	EnableIndividual *bool                               `json:"enableIndividual,omitempty" url:"enableIndividual,omitempty"`
	PaymentMethod    *bool                               `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	Business         *BusinessOnboardingOptionsRequest   `json:"business,omitempty" url:"business,omitempty"`
	Individual       *IndividualOnboardingOptionsRequest `json:"individual,omitempty" url:"individual,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OnboardingOptionsRequest) GetEnableBusiness() *bool {
	if o == nil {
		return nil
	}
	return o.EnableBusiness
}

func (o *OnboardingOptionsRequest) GetEnableIndividual() *bool {
	if o == nil {
		return nil
	}
	return o.EnableIndividual
}

func (o *OnboardingOptionsRequest) GetPaymentMethod() *bool {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *OnboardingOptionsRequest) GetBusiness() *BusinessOnboardingOptionsRequest {
	if o == nil {
		return nil
	}
	return o.Business
}

func (o *OnboardingOptionsRequest) GetIndividual() *IndividualOnboardingOptionsRequest {
	if o == nil {
		return nil
	}
	return o.Individual
}

func (o *OnboardingOptionsRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OnboardingOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OnboardingOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OnboardingOptionsRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OnboardingOptionsRequest) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OnboardingOptionsResponse struct {
	EnableBusiness   bool                                 `json:"enableBusiness" url:"enableBusiness"`
	EnableIndividual bool                                 `json:"enableIndividual" url:"enableIndividual"`
	PaymentMethod    bool                                 `json:"paymentMethod" url:"paymentMethod"`
	Business         *BusinessOnboardingOptionsResponse   `json:"business,omitempty" url:"business,omitempty"`
	Individual       *IndividualOnboardingOptionsResponse `json:"individual,omitempty" url:"individual,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OnboardingOptionsResponse) GetEnableBusiness() bool {
	if o == nil {
		return false
	}
	return o.EnableBusiness
}

func (o *OnboardingOptionsResponse) GetEnableIndividual() bool {
	if o == nil {
		return false
	}
	return o.EnableIndividual
}

func (o *OnboardingOptionsResponse) GetPaymentMethod() bool {
	if o == nil {
		return false
	}
	return o.PaymentMethod
}

func (o *OnboardingOptionsResponse) GetBusiness() *BusinessOnboardingOptionsResponse {
	if o == nil {
		return nil
	}
	return o.Business
}

func (o *OnboardingOptionsResponse) GetIndividual() *IndividualOnboardingOptionsResponse {
	if o == nil {
		return nil
	}
	return o.Individual
}

func (o *OnboardingOptionsResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OnboardingOptionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler OnboardingOptionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OnboardingOptionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OnboardingOptionsResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationID = string

type OrganizationRequest struct {
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Base64 encoded logo image.
	Logo *string `json:"logo,omitempty" url:"logo,omitempty"`
	// Base64 encoded favicon image.
	Favicon                          *string                                  `json:"favicon,omitempty" url:"favicon,omitempty"`
	WebsiteURL                       *string                                  `json:"websiteUrl,omitempty" url:"websiteUrl,omitempty"`
	SupportEmail                     *string                                  `json:"supportEmail,omitempty" url:"supportEmail,omitempty"`
	PaymentMethods                   *PaymentMethodsRequest                   `json:"paymentMethods,omitempty" url:"paymentMethods,omitempty"`
	EmailProvider                    *EmailProviderRequest                    `json:"emailProvider,omitempty" url:"emailProvider,omitempty"`
	ExternalAccountingSystemProvider *ExternalAccountingSystemProviderRequest `json:"externalAccountingSystemProvider,omitempty" url:"externalAccountingSystemProvider,omitempty"`
	ColorScheme                      *ColorSchemeRequest                      `json:"colorScheme,omitempty" url:"colorScheme,omitempty"`
	PayeeOnboardingOptions           *OnboardingOptionsRequest                `json:"payeeOnboardingOptions,omitempty" url:"payeeOnboardingOptions,omitempty"`
	PayorOnboardingOptions           *OnboardingOptionsRequest                `json:"payorOnboardingOptions,omitempty" url:"payorOnboardingOptions,omitempty"`
	MetadataSchema                   []*MetadataSchema                        `json:"metadataSchema,omitempty" url:"metadataSchema,omitempty"`
	NotificationEmailTemplate        *NotificationEmailTemplateRequest        `json:"notificationEmailTemplate,omitempty" url:"notificationEmailTemplate,omitempty"`
	CustomDomains                    []string                                 `json:"customDomains,omitempty" url:"customDomains,omitempty"`
	RolePermissions                  *RolePermissionRequest                   `json:"rolePermissions,omitempty" url:"rolePermissions,omitempty"`
	// If true, all notifications for this organization will be disabled.
	NotificationsDisabled *bool `json:"notificationsDisabled,omitempty" url:"notificationsDisabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OrganizationRequest) GetLogo() *string {
	if o == nil {
		return nil
	}
	return o.Logo
}

func (o *OrganizationRequest) GetFavicon() *string {
	if o == nil {
		return nil
	}
	return o.Favicon
}

func (o *OrganizationRequest) GetWebsiteURL() *string {
	if o == nil {
		return nil
	}
	return o.WebsiteURL
}

func (o *OrganizationRequest) GetSupportEmail() *string {
	if o == nil {
		return nil
	}
	return o.SupportEmail
}

func (o *OrganizationRequest) GetPaymentMethods() *PaymentMethodsRequest {
	if o == nil {
		return nil
	}
	return o.PaymentMethods
}

func (o *OrganizationRequest) GetEmailProvider() *EmailProviderRequest {
	if o == nil {
		return nil
	}
	return o.EmailProvider
}

func (o *OrganizationRequest) GetExternalAccountingSystemProvider() *ExternalAccountingSystemProviderRequest {
	if o == nil {
		return nil
	}
	return o.ExternalAccountingSystemProvider
}

func (o *OrganizationRequest) GetColorScheme() *ColorSchemeRequest {
	if o == nil {
		return nil
	}
	return o.ColorScheme
}

func (o *OrganizationRequest) GetPayeeOnboardingOptions() *OnboardingOptionsRequest {
	if o == nil {
		return nil
	}
	return o.PayeeOnboardingOptions
}

func (o *OrganizationRequest) GetPayorOnboardingOptions() *OnboardingOptionsRequest {
	if o == nil {
		return nil
	}
	return o.PayorOnboardingOptions
}

func (o *OrganizationRequest) GetMetadataSchema() []*MetadataSchema {
	if o == nil {
		return nil
	}
	return o.MetadataSchema
}

func (o *OrganizationRequest) GetNotificationEmailTemplate() *NotificationEmailTemplateRequest {
	if o == nil {
		return nil
	}
	return o.NotificationEmailTemplate
}

func (o *OrganizationRequest) GetCustomDomains() []string {
	if o == nil {
		return nil
	}
	return o.CustomDomains
}

func (o *OrganizationRequest) GetRolePermissions() *RolePermissionRequest {
	if o == nil {
		return nil
	}
	return o.RolePermissions
}

func (o *OrganizationRequest) GetNotificationsDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.NotificationsDisabled
}

func (o *OrganizationRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationRequest) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrganizationResponse struct {
	ID                               OrganizationID                            `json:"id" url:"id"`
	Sandbox                          bool                                      `json:"sandbox" url:"sandbox"`
	Name                             string                                    `json:"name" url:"name"`
	LogoURL                          *string                                   `json:"logoUrl,omitempty" url:"logoUrl,omitempty"`
	FaviconURL                       *string                                   `json:"faviconUrl,omitempty" url:"faviconUrl,omitempty"`
	WebsiteURL                       *string                                   `json:"websiteUrl,omitempty" url:"websiteUrl,omitempty"`
	SupportEmail                     *string                                   `json:"supportEmail,omitempty" url:"supportEmail,omitempty"`
	PaymentMethods                   *PaymentMethodsResponse                   `json:"paymentMethods,omitempty" url:"paymentMethods,omitempty"`
	EmailProvider                    *EmailProviderResponse                    `json:"emailProvider,omitempty" url:"emailProvider,omitempty"`
	ExternalAccountingSystemProvider *ExternalAccountingSystemProviderResponse `json:"externalAccountingSystemProvider,omitempty" url:"externalAccountingSystemProvider,omitempty"`
	ColorScheme                      *ColorSchemeResponse                      `json:"colorScheme,omitempty" url:"colorScheme,omitempty"`
	PayeeOnboardingOptions           *OnboardingOptionsResponse                `json:"payeeOnboardingOptions,omitempty" url:"payeeOnboardingOptions,omitempty"`
	PayorOnboardingOptions           *OnboardingOptionsResponse                `json:"payorOnboardingOptions,omitempty" url:"payorOnboardingOptions,omitempty"`
	MetadataSchema                   []*MetadataSchema                         `json:"metadataSchema,omitempty" url:"metadataSchema,omitempty"`
	NotificationEmailTemplate        *NotificationEmailTemplateResponse        `json:"notificationEmailTemplate,omitempty" url:"notificationEmailTemplate,omitempty"`
	CustomDomains                    []string                                  `json:"customDomains,omitempty" url:"customDomains,omitempty"`
	OrganizationEntityID             *EntityID                                 `json:"organizationEntityId,omitempty" url:"organizationEntityId,omitempty"`
	RolePermissions                  *RolePermissionResponse                   `json:"rolePermissions,omitempty" url:"rolePermissions,omitempty"`
	NotificationsDisabled            *bool                                     `json:"notificationsDisabled,omitempty" url:"notificationsDisabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationResponse) GetID() OrganizationID {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OrganizationResponse) GetSandbox() bool {
	if o == nil {
		return false
	}
	return o.Sandbox
}

func (o *OrganizationResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrganizationResponse) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *OrganizationResponse) GetFaviconURL() *string {
	if o == nil {
		return nil
	}
	return o.FaviconURL
}

func (o *OrganizationResponse) GetWebsiteURL() *string {
	if o == nil {
		return nil
	}
	return o.WebsiteURL
}

func (o *OrganizationResponse) GetSupportEmail() *string {
	if o == nil {
		return nil
	}
	return o.SupportEmail
}

func (o *OrganizationResponse) GetPaymentMethods() *PaymentMethodsResponse {
	if o == nil {
		return nil
	}
	return o.PaymentMethods
}

func (o *OrganizationResponse) GetEmailProvider() *EmailProviderResponse {
	if o == nil {
		return nil
	}
	return o.EmailProvider
}

func (o *OrganizationResponse) GetExternalAccountingSystemProvider() *ExternalAccountingSystemProviderResponse {
	if o == nil {
		return nil
	}
	return o.ExternalAccountingSystemProvider
}

func (o *OrganizationResponse) GetColorScheme() *ColorSchemeResponse {
	if o == nil {
		return nil
	}
	return o.ColorScheme
}

func (o *OrganizationResponse) GetPayeeOnboardingOptions() *OnboardingOptionsResponse {
	if o == nil {
		return nil
	}
	return o.PayeeOnboardingOptions
}

func (o *OrganizationResponse) GetPayorOnboardingOptions() *OnboardingOptionsResponse {
	if o == nil {
		return nil
	}
	return o.PayorOnboardingOptions
}

func (o *OrganizationResponse) GetMetadataSchema() []*MetadataSchema {
	if o == nil {
		return nil
	}
	return o.MetadataSchema
}

func (o *OrganizationResponse) GetNotificationEmailTemplate() *NotificationEmailTemplateResponse {
	if o == nil {
		return nil
	}
	return o.NotificationEmailTemplate
}

func (o *OrganizationResponse) GetCustomDomains() []string {
	if o == nil {
		return nil
	}
	return o.CustomDomains
}

func (o *OrganizationResponse) GetOrganizationEntityID() *EntityID {
	if o == nil {
		return nil
	}
	return o.OrganizationEntityID
}

func (o *OrganizationResponse) GetRolePermissions() *RolePermissionResponse {
	if o == nil {
		return nil
	}
	return o.RolePermissions
}

func (o *OrganizationResponse) GetNotificationsDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.NotificationsDisabled
}

func (o *OrganizationResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PaymentMethodsRequest struct {
	// List of payment methods that can be used to pay invoices.
	PayerPayments []*PaymentRailRequest `json:"payerPayments,omitempty" url:"payerPayments,omitempty"`
	// List of payment methods that can be created by a payor to send disbursements.
	BackupDisbursements []*PaymentRailRequest `json:"backupDisbursements,omitempty" url:"backupDisbursements,omitempty"`
	// List of payment methods that can be created by a payee to receive disbursements.
	VendorDisbursements []*PaymentRailRequest `json:"vendorDisbursements,omitempty" url:"vendorDisbursements,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentMethodsRequest) GetPayerPayments() []*PaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.PayerPayments
}

func (p *PaymentMethodsRequest) GetBackupDisbursements() []*PaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.BackupDisbursements
}

func (p *PaymentMethodsRequest) GetVendorDisbursements() []*PaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.VendorDisbursements
}

func (p *PaymentMethodsRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethodsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentMethodsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentMethodsRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethodsRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentMethodsResponse struct {
	// List of payment methods that can be used to pay invoices.
	PayerPayments []*PaymentRailResponse `json:"payerPayments,omitempty" url:"payerPayments,omitempty"`
	// List of payment methods that can be created by a payor to send disbursements.
	BackupDisbursements []*PaymentRailResponse `json:"backupDisbursements,omitempty" url:"backupDisbursements,omitempty"`
	// List of payment methods that can be created by a payee to receive disbursements.
	VendorDisbursements []*PaymentRailResponse `json:"vendorDisbursements,omitempty" url:"vendorDisbursements,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentMethodsResponse) GetPayerPayments() []*PaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.PayerPayments
}

func (p *PaymentMethodsResponse) GetBackupDisbursements() []*PaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.BackupDisbursements
}

func (p *PaymentMethodsResponse) GetVendorDisbursements() []*PaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.VendorDisbursements
}

func (p *PaymentMethodsResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethodsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentMethodsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentMethodsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethodsResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentRailRequest struct {
	Type        string
	BankAccount *BankPaymentRailRequest
	Card        *GenericPaymentRailRequest
	VirtualCard *GenericPaymentRailRequest
	Check       *CheckPaymentRailRequest
	Custom      *CustomPaymentRailRequest
	Bnpl        *GenericPaymentRailRequest
	OffPlatform *GenericPaymentRailRequest
	Utility     *GenericPaymentRailRequest
	Na          *GenericPaymentRailRequest
	Wallet      *GenericPaymentRailRequest
}

func (p *PaymentRailRequest) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PaymentRailRequest) GetBankAccount() *BankPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.BankAccount
}

func (p *PaymentRailRequest) GetCard() *GenericPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.Card
}

func (p *PaymentRailRequest) GetVirtualCard() *GenericPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.VirtualCard
}

func (p *PaymentRailRequest) GetCheck() *CheckPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.Check
}

func (p *PaymentRailRequest) GetCustom() *CustomPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.Custom
}

func (p *PaymentRailRequest) GetBnpl() *GenericPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.Bnpl
}

func (p *PaymentRailRequest) GetOffPlatform() *GenericPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.OffPlatform
}

func (p *PaymentRailRequest) GetUtility() *GenericPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.Utility
}

func (p *PaymentRailRequest) GetNa() *GenericPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.Na
}

func (p *PaymentRailRequest) GetWallet() *GenericPaymentRailRequest {
	if p == nil {
		return nil
	}
	return p.Wallet
}

func (p *PaymentRailRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", p)
	}
	switch unmarshaler.Type {
	case "bankAccount":
		value := new(BankPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.BankAccount = value
	case "card":
		value := new(GenericPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Card = value
	case "virtualCard":
		value := new(GenericPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.VirtualCard = value
	case "check":
		value := new(CheckPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Check = value
	case "custom":
		value := new(CustomPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Custom = value
	case "bnpl":
		value := new(GenericPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Bnpl = value
	case "offPlatform":
		value := new(GenericPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.OffPlatform = value
	case "utility":
		value := new(GenericPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Utility = value
	case "na":
		value := new(GenericPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Na = value
	case "wallet":
		value := new(GenericPaymentRailRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Wallet = value
	}
	return nil
}

func (p PaymentRailRequest) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.BankAccount != nil {
		return internal.MarshalJSONWithExtraProperty(p.BankAccount, "type", "bankAccount")
	}
	if p.Card != nil {
		return internal.MarshalJSONWithExtraProperty(p.Card, "type", "card")
	}
	if p.VirtualCard != nil {
		return internal.MarshalJSONWithExtraProperty(p.VirtualCard, "type", "virtualCard")
	}
	if p.Check != nil {
		return internal.MarshalJSONWithExtraProperty(p.Check, "type", "check")
	}
	if p.Custom != nil {
		return internal.MarshalJSONWithExtraProperty(p.Custom, "type", "custom")
	}
	if p.Bnpl != nil {
		return internal.MarshalJSONWithExtraProperty(p.Bnpl, "type", "bnpl")
	}
	if p.OffPlatform != nil {
		return internal.MarshalJSONWithExtraProperty(p.OffPlatform, "type", "offPlatform")
	}
	if p.Utility != nil {
		return internal.MarshalJSONWithExtraProperty(p.Utility, "type", "utility")
	}
	if p.Na != nil {
		return internal.MarshalJSONWithExtraProperty(p.Na, "type", "na")
	}
	if p.Wallet != nil {
		return internal.MarshalJSONWithExtraProperty(p.Wallet, "type", "wallet")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PaymentRailRequestVisitor interface {
	VisitBankAccount(*BankPaymentRailRequest) error
	VisitCard(*GenericPaymentRailRequest) error
	VisitVirtualCard(*GenericPaymentRailRequest) error
	VisitCheck(*CheckPaymentRailRequest) error
	VisitCustom(*CustomPaymentRailRequest) error
	VisitBnpl(*GenericPaymentRailRequest) error
	VisitOffPlatform(*GenericPaymentRailRequest) error
	VisitUtility(*GenericPaymentRailRequest) error
	VisitNa(*GenericPaymentRailRequest) error
	VisitWallet(*GenericPaymentRailRequest) error
}

func (p *PaymentRailRequest) Accept(visitor PaymentRailRequestVisitor) error {
	if p.BankAccount != nil {
		return visitor.VisitBankAccount(p.BankAccount)
	}
	if p.Card != nil {
		return visitor.VisitCard(p.Card)
	}
	if p.VirtualCard != nil {
		return visitor.VisitVirtualCard(p.VirtualCard)
	}
	if p.Check != nil {
		return visitor.VisitCheck(p.Check)
	}
	if p.Custom != nil {
		return visitor.VisitCustom(p.Custom)
	}
	if p.Bnpl != nil {
		return visitor.VisitBnpl(p.Bnpl)
	}
	if p.OffPlatform != nil {
		return visitor.VisitOffPlatform(p.OffPlatform)
	}
	if p.Utility != nil {
		return visitor.VisitUtility(p.Utility)
	}
	if p.Na != nil {
		return visitor.VisitNa(p.Na)
	}
	if p.Wallet != nil {
		return visitor.VisitWallet(p.Wallet)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *PaymentRailRequest) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.BankAccount != nil {
		fields = append(fields, "bankAccount")
	}
	if p.Card != nil {
		fields = append(fields, "card")
	}
	if p.VirtualCard != nil {
		fields = append(fields, "virtualCard")
	}
	if p.Check != nil {
		fields = append(fields, "check")
	}
	if p.Custom != nil {
		fields = append(fields, "custom")
	}
	if p.Bnpl != nil {
		fields = append(fields, "bnpl")
	}
	if p.OffPlatform != nil {
		fields = append(fields, "offPlatform")
	}
	if p.Utility != nil {
		fields = append(fields, "utility")
	}
	if p.Na != nil {
		fields = append(fields, "na")
	}
	if p.Wallet != nil {
		fields = append(fields, "wallet")
	}
	if len(fields) == 0 {
		if p.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Type)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Type != "" {
		field := fields[0]
		if p.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Type,
				p,
			)
		}
	}
	return nil
}

type PaymentRailResponse struct {
	Type        string
	BankAccount *BankPaymentRailResponse
	Card        *GenericPaymentRailResponse
	VirtualCard *GenericPaymentRailResponse
	Check       *CheckPaymentRailResponse
	Custom      *CustomPaymentRailResponse
	Bnpl        *GenericPaymentRailResponse
	OffPlatform *GenericPaymentRailResponse
	Utility     *GenericPaymentRailResponse
	Na          *GenericPaymentRailResponse
	Wallet      *GenericPaymentRailResponse
}

func (p *PaymentRailResponse) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PaymentRailResponse) GetBankAccount() *BankPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.BankAccount
}

func (p *PaymentRailResponse) GetCard() *GenericPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.Card
}

func (p *PaymentRailResponse) GetVirtualCard() *GenericPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.VirtualCard
}

func (p *PaymentRailResponse) GetCheck() *CheckPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.Check
}

func (p *PaymentRailResponse) GetCustom() *CustomPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.Custom
}

func (p *PaymentRailResponse) GetBnpl() *GenericPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.Bnpl
}

func (p *PaymentRailResponse) GetOffPlatform() *GenericPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.OffPlatform
}

func (p *PaymentRailResponse) GetUtility() *GenericPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.Utility
}

func (p *PaymentRailResponse) GetNa() *GenericPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.Na
}

func (p *PaymentRailResponse) GetWallet() *GenericPaymentRailResponse {
	if p == nil {
		return nil
	}
	return p.Wallet
}

func (p *PaymentRailResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", p)
	}
	switch unmarshaler.Type {
	case "bankAccount":
		value := new(BankPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.BankAccount = value
	case "card":
		value := new(GenericPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Card = value
	case "virtualCard":
		value := new(GenericPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.VirtualCard = value
	case "check":
		value := new(CheckPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Check = value
	case "custom":
		value := new(CustomPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Custom = value
	case "bnpl":
		value := new(GenericPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Bnpl = value
	case "offPlatform":
		value := new(GenericPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.OffPlatform = value
	case "utility":
		value := new(GenericPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Utility = value
	case "na":
		value := new(GenericPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Na = value
	case "wallet":
		value := new(GenericPaymentRailResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Wallet = value
	}
	return nil
}

func (p PaymentRailResponse) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.BankAccount != nil {
		return internal.MarshalJSONWithExtraProperty(p.BankAccount, "type", "bankAccount")
	}
	if p.Card != nil {
		return internal.MarshalJSONWithExtraProperty(p.Card, "type", "card")
	}
	if p.VirtualCard != nil {
		return internal.MarshalJSONWithExtraProperty(p.VirtualCard, "type", "virtualCard")
	}
	if p.Check != nil {
		return internal.MarshalJSONWithExtraProperty(p.Check, "type", "check")
	}
	if p.Custom != nil {
		return internal.MarshalJSONWithExtraProperty(p.Custom, "type", "custom")
	}
	if p.Bnpl != nil {
		return internal.MarshalJSONWithExtraProperty(p.Bnpl, "type", "bnpl")
	}
	if p.OffPlatform != nil {
		return internal.MarshalJSONWithExtraProperty(p.OffPlatform, "type", "offPlatform")
	}
	if p.Utility != nil {
		return internal.MarshalJSONWithExtraProperty(p.Utility, "type", "utility")
	}
	if p.Na != nil {
		return internal.MarshalJSONWithExtraProperty(p.Na, "type", "na")
	}
	if p.Wallet != nil {
		return internal.MarshalJSONWithExtraProperty(p.Wallet, "type", "wallet")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PaymentRailResponseVisitor interface {
	VisitBankAccount(*BankPaymentRailResponse) error
	VisitCard(*GenericPaymentRailResponse) error
	VisitVirtualCard(*GenericPaymentRailResponse) error
	VisitCheck(*CheckPaymentRailResponse) error
	VisitCustom(*CustomPaymentRailResponse) error
	VisitBnpl(*GenericPaymentRailResponse) error
	VisitOffPlatform(*GenericPaymentRailResponse) error
	VisitUtility(*GenericPaymentRailResponse) error
	VisitNa(*GenericPaymentRailResponse) error
	VisitWallet(*GenericPaymentRailResponse) error
}

func (p *PaymentRailResponse) Accept(visitor PaymentRailResponseVisitor) error {
	if p.BankAccount != nil {
		return visitor.VisitBankAccount(p.BankAccount)
	}
	if p.Card != nil {
		return visitor.VisitCard(p.Card)
	}
	if p.VirtualCard != nil {
		return visitor.VisitVirtualCard(p.VirtualCard)
	}
	if p.Check != nil {
		return visitor.VisitCheck(p.Check)
	}
	if p.Custom != nil {
		return visitor.VisitCustom(p.Custom)
	}
	if p.Bnpl != nil {
		return visitor.VisitBnpl(p.Bnpl)
	}
	if p.OffPlatform != nil {
		return visitor.VisitOffPlatform(p.OffPlatform)
	}
	if p.Utility != nil {
		return visitor.VisitUtility(p.Utility)
	}
	if p.Na != nil {
		return visitor.VisitNa(p.Na)
	}
	if p.Wallet != nil {
		return visitor.VisitWallet(p.Wallet)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *PaymentRailResponse) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.BankAccount != nil {
		fields = append(fields, "bankAccount")
	}
	if p.Card != nil {
		fields = append(fields, "card")
	}
	if p.VirtualCard != nil {
		fields = append(fields, "virtualCard")
	}
	if p.Check != nil {
		fields = append(fields, "check")
	}
	if p.Custom != nil {
		fields = append(fields, "custom")
	}
	if p.Bnpl != nil {
		fields = append(fields, "bnpl")
	}
	if p.OffPlatform != nil {
		fields = append(fields, "offPlatform")
	}
	if p.Utility != nil {
		fields = append(fields, "utility")
	}
	if p.Na != nil {
		fields = append(fields, "na")
	}
	if p.Wallet != nil {
		fields = append(fields, "wallet")
	}
	if len(fields) == 0 {
		if p.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Type)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Type != "" {
		field := fields[0]
		if p.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Type,
				p,
			)
		}
	}
	return nil
}

type Permission string

const (
	PermissionInvoiceAll              Permission = "invoice.all"
	PermissionInvoiceViewAll          Permission = "invoice.view.all"
	PermissionInvoiceViewDraft        Permission = "invoice.view.draft"
	PermissionInvoiceViewNew          Permission = "invoice.view.new"
	PermissionInvoiceViewApproved     Permission = "invoice.view.approved"
	PermissionInvoiceViewScheduled    Permission = "invoice.view.scheduled"
	PermissionInvoiceViewPending      Permission = "invoice.view.pending"
	PermissionInvoiceViewPaid         Permission = "invoice.view.paid"
	PermissionInvoiceViewArchived     Permission = "invoice.view.archived"
	PermissionInvoiceViewRefused      Permission = "invoice.view.refused"
	PermissionInvoiceViewCanceled     Permission = "invoice.view.canceled"
	PermissionInvoiceViewFailed       Permission = "invoice.view.failed"
	PermissionInvoiceCreateAll        Permission = "invoice.create.all"
	PermissionInvoiceCreateDraft      Permission = "invoice.create.draft"
	PermissionInvoiceCreateNew        Permission = "invoice.create.new"
	PermissionInvoiceCreateApproved   Permission = "invoice.create.approved"
	PermissionInvoiceCreateScheduled  Permission = "invoice.create.scheduled"
	PermissionInvoiceCreateArchived   Permission = "invoice.create.archived"
	PermissionInvoiceCreateCancel     Permission = "invoice.create.cancel"
	PermissionInvoiceUpdateAll        Permission = "invoice.update.all"
	PermissionInvoiceUpdateDraft      Permission = "invoice.update.draft"
	PermissionInvoiceUpdateNew        Permission = "invoice.update.new"
	PermissionInvoiceUpdateApproved   Permission = "invoice.update.approved"
	PermissionInvoiceUpdateScheduled  Permission = "invoice.update.scheduled"
	PermissionInvoiceUpdateArchived   Permission = "invoice.update.archived"
	PermissionInvoiceUpdateCancel     Permission = "invoice.update.cancel"
	PermissionInvoiceDelete           Permission = "invoice.delete"
	PermissionInvoiceCommentView      Permission = "invoice.comment.view"
	PermissionInvoiceCommentCreate    Permission = "invoice.comment.create"
	PermissionInvoiceApproverOverride Permission = "invoice.approver.override"
	PermissionInvoiceCheckPrint       Permission = "invoice.check.print"
	PermissionPaymentMethodAll        Permission = "paymentMethod.all"
	PermissionPaymentMethodView       Permission = "paymentMethod.view"
	PermissionPaymentMethodCreate     Permission = "paymentMethod.create"
	PermissionPaymentMethodUpdate     Permission = "paymentMethod.update"
	PermissionPaymentMethodDelete     Permission = "paymentMethod.delete"
)

func NewPermissionFromString(s string) (Permission, error) {
	switch s {
	case "invoice.all":
		return PermissionInvoiceAll, nil
	case "invoice.view.all":
		return PermissionInvoiceViewAll, nil
	case "invoice.view.draft":
		return PermissionInvoiceViewDraft, nil
	case "invoice.view.new":
		return PermissionInvoiceViewNew, nil
	case "invoice.view.approved":
		return PermissionInvoiceViewApproved, nil
	case "invoice.view.scheduled":
		return PermissionInvoiceViewScheduled, nil
	case "invoice.view.pending":
		return PermissionInvoiceViewPending, nil
	case "invoice.view.paid":
		return PermissionInvoiceViewPaid, nil
	case "invoice.view.archived":
		return PermissionInvoiceViewArchived, nil
	case "invoice.view.refused":
		return PermissionInvoiceViewRefused, nil
	case "invoice.view.canceled":
		return PermissionInvoiceViewCanceled, nil
	case "invoice.view.failed":
		return PermissionInvoiceViewFailed, nil
	case "invoice.create.all":
		return PermissionInvoiceCreateAll, nil
	case "invoice.create.draft":
		return PermissionInvoiceCreateDraft, nil
	case "invoice.create.new":
		return PermissionInvoiceCreateNew, nil
	case "invoice.create.approved":
		return PermissionInvoiceCreateApproved, nil
	case "invoice.create.scheduled":
		return PermissionInvoiceCreateScheduled, nil
	case "invoice.create.archived":
		return PermissionInvoiceCreateArchived, nil
	case "invoice.create.cancel":
		return PermissionInvoiceCreateCancel, nil
	case "invoice.update.all":
		return PermissionInvoiceUpdateAll, nil
	case "invoice.update.draft":
		return PermissionInvoiceUpdateDraft, nil
	case "invoice.update.new":
		return PermissionInvoiceUpdateNew, nil
	case "invoice.update.approved":
		return PermissionInvoiceUpdateApproved, nil
	case "invoice.update.scheduled":
		return PermissionInvoiceUpdateScheduled, nil
	case "invoice.update.archived":
		return PermissionInvoiceUpdateArchived, nil
	case "invoice.update.cancel":
		return PermissionInvoiceUpdateCancel, nil
	case "invoice.delete":
		return PermissionInvoiceDelete, nil
	case "invoice.comment.view":
		return PermissionInvoiceCommentView, nil
	case "invoice.comment.create":
		return PermissionInvoiceCommentCreate, nil
	case "invoice.approver.override":
		return PermissionInvoiceApproverOverride, nil
	case "invoice.check.print":
		return PermissionInvoiceCheckPrint, nil
	case "paymentMethod.all":
		return PermissionPaymentMethodAll, nil
	case "paymentMethod.view":
		return PermissionPaymentMethodView, nil
	case "paymentMethod.create":
		return PermissionPaymentMethodCreate, nil
	case "paymentMethod.update":
		return PermissionPaymentMethodUpdate, nil
	case "paymentMethod.delete":
		return PermissionPaymentMethodDelete, nil
	}
	var t Permission
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p Permission) Ptr() *Permission {
	return &p
}

type RolePermissionRequest = map[string][]Permission

type RolePermissionResponse = map[string][]Permission

type RutterProviderRequest struct {
	ClientID     string `json:"clientId" url:"clientId"`
	ClientSecret string `json:"clientSecret" url:"clientSecret"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RutterProviderRequest) GetClientID() string {
	if r == nil {
		return ""
	}
	return r.ClientID
}

func (r *RutterProviderRequest) GetClientSecret() string {
	if r == nil {
		return ""
	}
	return r.ClientSecret
}

func (r *RutterProviderRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RutterProviderRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RutterProviderRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RutterProviderRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RutterProviderRequest) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RutterProviderResponse struct {
	HasClientID     bool `json:"hasClientId" url:"hasClientId"`
	HasClientSecret bool `json:"hasClientSecret" url:"hasClientSecret"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RutterProviderResponse) GetHasClientID() bool {
	if r == nil {
		return false
	}
	return r.HasClientID
}

func (r *RutterProviderResponse) GetHasClientSecret() bool {
	if r == nil {
		return false
	}
	return r.HasClientSecret
}

func (r *RutterProviderResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RutterProviderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RutterProviderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RutterProviderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RutterProviderResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
