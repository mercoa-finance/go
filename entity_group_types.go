// This file was auto-generated by Fern from our API Definition.

package mercoa

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/mercoa-finance/go/internal"
	time "time"
)

type EntityGroupAddEntitiesRequest struct {
	// List of entity IDs or foreign IDs to add to the group
	EntityIDs []EntityID `json:"entityIds,omitempty" url:"entityIds,omitempty"`
	// Entity ID / foreign ID of an entity currently in the group to copy users and roles from OR a boolean defining if users should be copied to the new entities.
	//
	// If not provided or false, users and roles will not be copied.
	// If true, users and roles will be copied from the first entity the group.
	// If a valid ID is provided, users and roles will be copied from the corresponding provided entity in the group.
	//
	// Note: If users copied, any preexisting users will be left alone, and users with the same foreign ID will not be copied.
	CopyUsersFrom *EntityIDOrBoolean `json:"copyUsersFrom,omitempty" url:"copyUsersFrom,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupAddEntitiesRequest) GetEntityIDs() []EntityID {
	if e == nil {
		return nil
	}
	return e.EntityIDs
}

func (e *EntityGroupAddEntitiesRequest) GetCopyUsersFrom() *EntityIDOrBoolean {
	if e == nil {
		return nil
	}
	return e.CopyUsersFrom
}

func (e *EntityGroupAddEntitiesRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupAddEntitiesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityGroupAddEntitiesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityGroupAddEntitiesRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupAddEntitiesRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityGroupCreateRequest struct {
	ForeignID   *string `json:"foreignId,omitempty" url:"foreignId,omitempty"`
	Name        *string `json:"name,omitempty" url:"name,omitempty"`
	EmailToName *string `json:"emailToName,omitempty" url:"emailToName,omitempty"`
	// Metadata key/value pairs to associate with this group. Will overwrite existing metadata.
	Metadata map[string]string `json:"metadata,omitempty" url:"metadata,omitempty"`
	// List of entity IDs or foreign IDs
	EntityIDs []EntityID `json:"entityIds,omitempty" url:"entityIds,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupCreateRequest) GetForeignID() *string {
	if e == nil {
		return nil
	}
	return e.ForeignID
}

func (e *EntityGroupCreateRequest) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EntityGroupCreateRequest) GetEmailToName() *string {
	if e == nil {
		return nil
	}
	return e.EmailToName
}

func (e *EntityGroupCreateRequest) GetMetadata() map[string]string {
	if e == nil {
		return nil
	}
	return e.Metadata
}

func (e *EntityGroupCreateRequest) GetEntityIDs() []EntityID {
	if e == nil {
		return nil
	}
	return e.EntityIDs
}

func (e *EntityGroupCreateRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityGroupCreateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityGroupCreateRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupCreateRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityGroupFindResponse struct {
	Count   int                    `json:"count" url:"count"`
	HasMore bool                   `json:"hasMore" url:"hasMore"`
	Data    []*EntityGroupResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupFindResponse) GetCount() int {
	if e == nil {
		return 0
	}
	return e.Count
}

func (e *EntityGroupFindResponse) GetHasMore() bool {
	if e == nil {
		return false
	}
	return e.HasMore
}

func (e *EntityGroupFindResponse) GetData() []*EntityGroupResponse {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *EntityGroupFindResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupFindResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityGroupFindResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityGroupFindResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupFindResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityGroupID = string

type EntityGroupRemoveEntitiesRequest struct {
	// List of entity IDs or foreign IDs to remove from the group
	EntityIDs []EntityID `json:"entityIds,omitempty" url:"entityIds,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupRemoveEntitiesRequest) GetEntityIDs() []EntityID {
	if e == nil {
		return nil
	}
	return e.EntityIDs
}

func (e *EntityGroupRemoveEntitiesRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupRemoveEntitiesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityGroupRemoveEntitiesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityGroupRemoveEntitiesRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupRemoveEntitiesRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityGroupResponse struct {
	ID          EntityGroupID     `json:"id" url:"id"`
	ForeignID   *string           `json:"foreignId,omitempty" url:"foreignId,omitempty"`
	Name        *string           `json:"name,omitempty" url:"name,omitempty"`
	EmailToName *string           `json:"emailToName,omitempty" url:"emailToName,omitempty"`
	Entities    []*EntityResponse `json:"entities,omitempty" url:"entities,omitempty"`
	Metadata    map[string]string `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupResponse) GetID() EntityGroupID {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *EntityGroupResponse) GetForeignID() *string {
	if e == nil {
		return nil
	}
	return e.ForeignID
}

func (e *EntityGroupResponse) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EntityGroupResponse) GetEmailToName() *string {
	if e == nil {
		return nil
	}
	return e.EmailToName
}

func (e *EntityGroupResponse) GetEntities() []*EntityResponse {
	if e == nil {
		return nil
	}
	return e.Entities
}

func (e *EntityGroupResponse) GetMetadata() map[string]string {
	if e == nil {
		return nil
	}
	return e.Metadata
}

func (e *EntityGroupResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityGroupResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityGroupResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityGroupUpdateRequest struct {
	ForeignID   *string `json:"foreignId,omitempty" url:"foreignId,omitempty"`
	Name        *string `json:"name,omitempty" url:"name,omitempty"`
	EmailToName *string `json:"emailToName,omitempty" url:"emailToName,omitempty"`
	// Metadata key/value pairs to associate with this group. Will overwrite existing metadata.
	Metadata map[string]string `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupUpdateRequest) GetForeignID() *string {
	if e == nil {
		return nil
	}
	return e.ForeignID
}

func (e *EntityGroupUpdateRequest) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EntityGroupUpdateRequest) GetEmailToName() *string {
	if e == nil {
		return nil
	}
	return e.EmailToName
}

func (e *EntityGroupUpdateRequest) GetMetadata() map[string]string {
	if e == nil {
		return nil
	}
	return e.Metadata
}

func (e *EntityGroupUpdateRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupUpdateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityGroupUpdateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityGroupUpdateRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupUpdateRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityGroupUserEntityRequest struct {
	// List of roles. A role can be any string. For example: "payer", "approver", "viewer"
	Roles []string `json:"roles,omitempty" url:"roles,omitempty"`
	// The IDs of the entities that these roles applies to.
	EntityID EntityID `json:"entityId" url:"entityId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupUserEntityRequest) GetRoles() []string {
	if e == nil {
		return nil
	}
	return e.Roles
}

func (e *EntityGroupUserEntityRequest) GetEntityID() EntityID {
	if e == nil {
		return ""
	}
	return e.EntityID
}

func (e *EntityGroupUserEntityRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupUserEntityRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityGroupUserEntityRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityGroupUserEntityRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupUserEntityRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityGroupUserEntityResponse struct {
	// List of roles. A role can be any string. For example: "payer", "approver", "viewer"
	Roles []string `json:"roles,omitempty" url:"roles,omitempty"`
	// The IDs of the entities that these roles applies to.
	EntityID EntityID     `json:"entityId" url:"entityId"`
	ID       EntityUserID `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupUserEntityResponse) GetRoles() []string {
	if e == nil {
		return nil
	}
	return e.Roles
}

func (e *EntityGroupUserEntityResponse) GetEntityID() EntityID {
	if e == nil {
		return ""
	}
	return e.EntityID
}

func (e *EntityGroupUserEntityResponse) GetID() EntityUserID {
	if e == nil {
		return ""
	}
	return e.ID
}

func (e *EntityGroupUserEntityResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupUserEntityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityGroupUserEntityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityGroupUserEntityResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupUserEntityResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityGroupUserRequest struct {
	// The ID used to identify this user in your system. This is a required field and needs to be unique for all users in the group.
	ForeignID string  `json:"foreignId" url:"foreignId"`
	Email     *string `json:"email,omitempty" url:"email,omitempty"`
	Name      *string `json:"name,omitempty" url:"name,omitempty"`
	// List of roles per entity. By default, the user will have no roles.
	Entities []*EntityGroupUserEntityRequest `json:"entities,omitempty" url:"entities,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupUserRequest) GetForeignID() string {
	if e == nil {
		return ""
	}
	return e.ForeignID
}

func (e *EntityGroupUserRequest) GetEmail() *string {
	if e == nil {
		return nil
	}
	return e.Email
}

func (e *EntityGroupUserRequest) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EntityGroupUserRequest) GetEntities() []*EntityGroupUserEntityRequest {
	if e == nil {
		return nil
	}
	return e.Entities
}

func (e *EntityGroupUserRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityGroupUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityGroupUserRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupUserRequest) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityGroupUserResponse struct {
	// The ID used to identify this user in your system.
	ForeignID string  `json:"foreignId" url:"foreignId"`
	Email     *string `json:"email,omitempty" url:"email,omitempty"`
	Name      *string `json:"name,omitempty" url:"name,omitempty"`
	// List of roles per entity.
	Entities  []*EntityGroupUserEntityResponse `json:"entities,omitempty" url:"entities,omitempty"`
	CreatedAt time.Time                        `json:"createdAt" url:"createdAt"`
	UpdatedAt time.Time                        `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityGroupUserResponse) GetForeignID() string {
	if e == nil {
		return ""
	}
	return e.ForeignID
}

func (e *EntityGroupUserResponse) GetEmail() *string {
	if e == nil {
		return nil
	}
	return e.Email
}

func (e *EntityGroupUserResponse) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EntityGroupUserResponse) GetEntities() []*EntityGroupUserEntityResponse {
	if e == nil {
		return nil
	}
	return e.Entities
}

func (e *EntityGroupUserResponse) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *EntityGroupUserResponse) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *EntityGroupUserResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityGroupUserResponse) UnmarshalJSON(data []byte) error {
	type embed EntityGroupUserResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityGroupUserResponse(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityGroupUserResponse) MarshalJSON() ([]byte, error) {
	type embed EntityGroupUserResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewDateTime(e.CreatedAt),
		UpdatedAt: internal.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityGroupUserResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityIDOrBoolean struct {
	Boolean  bool
	EntityID EntityID

	typ string
}

func (e *EntityIDOrBoolean) GetBoolean() bool {
	if e == nil {
		return false
	}
	return e.Boolean
}

func (e *EntityIDOrBoolean) GetEntityID() EntityID {
	if e == nil {
		return ""
	}
	return e.EntityID
}

func (e *EntityIDOrBoolean) UnmarshalJSON(data []byte) error {
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		e.typ = "Boolean"
		e.Boolean = valueBoolean
		return nil
	}
	var valueEntityID EntityID
	if err := json.Unmarshal(data, &valueEntityID); err == nil {
		e.typ = "EntityID"
		e.EntityID = valueEntityID
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EntityIDOrBoolean) MarshalJSON() ([]byte, error) {
	if e.typ == "Boolean" || e.Boolean != false {
		return json.Marshal(e.Boolean)
	}
	if e.typ == "EntityID" || e.EntityID != "" {
		return json.Marshal(e.EntityID)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EntityIDOrBooleanVisitor interface {
	VisitBoolean(bool) error
	VisitEntityID(EntityID) error
}

func (e *EntityIDOrBoolean) Accept(visitor EntityIDOrBooleanVisitor) error {
	if e.typ == "Boolean" || e.Boolean != false {
		return visitor.VisitBoolean(e.Boolean)
	}
	if e.typ == "EntityID" || e.EntityID != "" {
		return visitor.VisitEntityID(e.EntityID)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type FindEntityGroupUserResponse struct {
	// Total number of users for the given filters. This value is not limited by the limit parameter. It is provided so that you can determine how many pages of results are available.
	Count int `json:"count" url:"count"`
	// True if there are more users available for the given filters.
	HasMore bool                       `json:"hasMore" url:"hasMore"`
	Data    []*EntityGroupUserResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FindEntityGroupUserResponse) GetCount() int {
	if f == nil {
		return 0
	}
	return f.Count
}

func (f *FindEntityGroupUserResponse) GetHasMore() bool {
	if f == nil {
		return false
	}
	return f.HasMore
}

func (f *FindEntityGroupUserResponse) GetData() []*EntityGroupUserResponse {
	if f == nil {
		return nil
	}
	return f.Data
}

func (f *FindEntityGroupUserResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FindEntityGroupUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FindEntityGroupUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FindEntityGroupUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FindEntityGroupUserResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}
