// This file was auto-generated by Fern from our API Definition.

package entity

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mercoa-finance/go/core"
)

type ExternalAccountingSystemCompanyCreationRequest struct {
	Type   string
	Codat  *CodatCompanyCreationRequest
	Rutter *RutterCompanyCreationRequest
}

func (e *ExternalAccountingSystemCompanyCreationRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "codat":
		value := new(CodatCompanyCreationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Codat = value
	case "rutter":
		value := new(RutterCompanyCreationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rutter = value
	}
	return nil
}

func (e ExternalAccountingSystemCompanyCreationRequest) MarshalJSON() ([]byte, error) {
	if e.Codat != nil {
		return core.MarshalJSONWithExtraProperty(e.Codat, "type", "codat")
	}
	if e.Rutter != nil {
		return core.MarshalJSONWithExtraProperty(e.Rutter, "type", "rutter")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExternalAccountingSystemCompanyCreationRequestVisitor interface {
	VisitCodat(*CodatCompanyCreationRequest) error
	VisitRutter(*RutterCompanyCreationRequest) error
}

func (e *ExternalAccountingSystemCompanyCreationRequest) Accept(visitor ExternalAccountingSystemCompanyCreationRequestVisitor) error {
	if e.Codat != nil {
		return visitor.VisitCodat(e.Codat)
	}
	if e.Rutter != nil {
		return visitor.VisitRutter(e.Rutter)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExternalAccountingSystemCompanyResponse struct {
	Type   string
	Codat  *CodatCompanyResponse
	Rutter *RutterCompanyResponse
}

func (e *ExternalAccountingSystemCompanyResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "codat":
		value := new(CodatCompanyResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Codat = value
	case "rutter":
		value := new(RutterCompanyResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rutter = value
	}
	return nil
}

func (e ExternalAccountingSystemCompanyResponse) MarshalJSON() ([]byte, error) {
	if e.Codat != nil {
		return core.MarshalJSONWithExtraProperty(e.Codat, "type", "codat")
	}
	if e.Rutter != nil {
		return core.MarshalJSONWithExtraProperty(e.Rutter, "type", "rutter")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExternalAccountingSystemCompanyResponseVisitor interface {
	VisitCodat(*CodatCompanyResponse) error
	VisitRutter(*RutterCompanyResponse) error
}

func (e *ExternalAccountingSystemCompanyResponse) Accept(visitor ExternalAccountingSystemCompanyResponseVisitor) error {
	if e.Codat != nil {
		return visitor.VisitCodat(e.Codat)
	}
	if e.Rutter != nil {
		return visitor.VisitRutter(e.Rutter)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}
