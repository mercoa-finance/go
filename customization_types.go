// This file was auto-generated by Fern from our API Definition.

package mercoa

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/mercoa-finance/go/internal"
)

type BankAccountPaymentMethodCustomizationRequest struct {
	// If true, this method will will not be available to the entity.
	Disabled bool `json:"disabled" url:"disabled"`
	// The default delivery method for this payment method.
	DefaultDeliveryMethod *BankDeliveryMethod `json:"defaultDeliveryMethod,omitempty" url:"defaultDeliveryMethod,omitempty"`
	// The delivery methods that are available for this payment method.
	AvailableDeliveryMethods []BankDeliveryMethod `json:"availableDeliveryMethods,omitempty" url:"availableDeliveryMethods,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankAccountPaymentMethodCustomizationRequest) GetDisabled() bool {
	if b == nil {
		return false
	}
	return b.Disabled
}

func (b *BankAccountPaymentMethodCustomizationRequest) GetDefaultDeliveryMethod() *BankDeliveryMethod {
	if b == nil {
		return nil
	}
	return b.DefaultDeliveryMethod
}

func (b *BankAccountPaymentMethodCustomizationRequest) GetAvailableDeliveryMethods() []BankDeliveryMethod {
	if b == nil {
		return nil
	}
	return b.AvailableDeliveryMethods
}

func (b *BankAccountPaymentMethodCustomizationRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankAccountPaymentMethodCustomizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler BankAccountPaymentMethodCustomizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BankAccountPaymentMethodCustomizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankAccountPaymentMethodCustomizationRequest) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CheckPaymentMethodCustomizationRequest struct {
	// If true, this method will will not be available to the entity.
	Disabled bool `json:"disabled" url:"disabled"`
	// The default delivery method for this payment method.
	DefaultDeliveryMethod *CheckDeliveryMethod `json:"defaultDeliveryMethod,omitempty" url:"defaultDeliveryMethod,omitempty"`
	// The delivery methods that are available for this payment method.
	AvailableDeliveryMethods []CheckDeliveryMethod `json:"availableDeliveryMethods,omitempty" url:"availableDeliveryMethods,omitempty"`
	// If true, the check will be printed with the description.
	PrintDescription *bool `json:"printDescription,omitempty" url:"printDescription,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckPaymentMethodCustomizationRequest) GetDisabled() bool {
	if c == nil {
		return false
	}
	return c.Disabled
}

func (c *CheckPaymentMethodCustomizationRequest) GetDefaultDeliveryMethod() *CheckDeliveryMethod {
	if c == nil {
		return nil
	}
	return c.DefaultDeliveryMethod
}

func (c *CheckPaymentMethodCustomizationRequest) GetAvailableDeliveryMethods() []CheckDeliveryMethod {
	if c == nil {
		return nil
	}
	return c.AvailableDeliveryMethods
}

func (c *CheckPaymentMethodCustomizationRequest) GetPrintDescription() *bool {
	if c == nil {
		return nil
	}
	return c.PrintDescription
}

func (c *CheckPaymentMethodCustomizationRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckPaymentMethodCustomizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckPaymentMethodCustomizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckPaymentMethodCustomizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckPaymentMethodCustomizationRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomPaymentMethodCustomizationRequest struct {
	// If true, this method will will not be available to the entity.
	Disabled bool `json:"disabled" url:"disabled"`
	// The ID of the schema to use for this payment method.
	SchemaID string `json:"schemaId" url:"schemaId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CustomPaymentMethodCustomizationRequest) GetDisabled() bool {
	if c == nil {
		return false
	}
	return c.Disabled
}

func (c *CustomPaymentMethodCustomizationRequest) GetSchemaID() string {
	if c == nil {
		return ""
	}
	return c.SchemaID
}

func (c *CustomPaymentMethodCustomizationRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomPaymentMethodCustomizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomPaymentMethodCustomizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomPaymentMethodCustomizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomPaymentMethodCustomizationRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DefaultFee struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DefaultFee) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DefaultFee) UnmarshalJSON(data []byte) error {
	type unmarshaler DefaultFee
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DefaultFee(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DefaultFee) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type FeeCustomizationDetailRequest struct {
	// Fees to be applied to the source of the transaction.
	Source *FeeCustomizationRailRequest `json:"source,omitempty" url:"source,omitempty"`
	// Fees to be applied to the destination of the transaction.
	Destination *FeeCustomizationRailRequest `json:"destination,omitempty" url:"destination,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FeeCustomizationDetailRequest) GetSource() *FeeCustomizationRailRequest {
	if f == nil {
		return nil
	}
	return f.Source
}

func (f *FeeCustomizationDetailRequest) GetDestination() *FeeCustomizationRailRequest {
	if f == nil {
		return nil
	}
	return f.Destination
}

func (f *FeeCustomizationDetailRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeeCustomizationDetailRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FeeCustomizationDetailRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FeeCustomizationDetailRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeeCustomizationDetailRequest) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FeeCustomizationRailRequest struct {
	// The fee for the ACH standard rail.
	AchStandard *PaymentMethodFee `json:"ACH_STANDARD,omitempty" url:"ACH_STANDARD,omitempty"`
	// The fee for the ACH same day rail.
	AchSameDay *PaymentMethodFee `json:"ACH_SAME_DAY,omitempty" url:"ACH_SAME_DAY,omitempty"`
	// The fee for the check print rail.
	CheckPrint *PaymentMethodFee `json:"CHECK_PRINT,omitempty" url:"CHECK_PRINT,omitempty"`
	// The fee for the check mail rail.
	CheckMail *PaymentMethodFee `json:"CHECK_MAIL,omitempty" url:"CHECK_MAIL,omitempty"`
	// The fee for the check mail priority rail.
	CheckMailPriority *PaymentMethodFee `json:"CHECK_MAIL_PRIORITY,omitempty" url:"CHECK_MAIL_PRIORITY,omitempty"`
	// The fee for the check mail UPS next day rail.
	CheckMailUpsNextDay *PaymentMethodFee `json:"CHECK_MAIL_UPS_NEXT_DAY,omitempty" url:"CHECK_MAIL_UPS_NEXT_DAY,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FeeCustomizationRailRequest) GetAchStandard() *PaymentMethodFee {
	if f == nil {
		return nil
	}
	return f.AchStandard
}

func (f *FeeCustomizationRailRequest) GetAchSameDay() *PaymentMethodFee {
	if f == nil {
		return nil
	}
	return f.AchSameDay
}

func (f *FeeCustomizationRailRequest) GetCheckPrint() *PaymentMethodFee {
	if f == nil {
		return nil
	}
	return f.CheckPrint
}

func (f *FeeCustomizationRailRequest) GetCheckMail() *PaymentMethodFee {
	if f == nil {
		return nil
	}
	return f.CheckMail
}

func (f *FeeCustomizationRailRequest) GetCheckMailPriority() *PaymentMethodFee {
	if f == nil {
		return nil
	}
	return f.CheckMailPriority
}

func (f *FeeCustomizationRailRequest) GetCheckMailUpsNextDay() *PaymentMethodFee {
	if f == nil {
		return nil
	}
	return f.CheckMailUpsNextDay
}

func (f *FeeCustomizationRailRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeeCustomizationRailRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FeeCustomizationRailRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FeeCustomizationRailRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeeCustomizationRailRequest) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FeeCustomizationRequest struct {
	// When the entity creating the invoice is the payer, these fees will be applied to the transaction.
	Payable *FeeCustomizationDetailRequest `json:"payable,omitempty" url:"payable,omitempty"`
	// When the entity creating the invoice is the payee, these fees will be applied to the transaction.
	Receivable *FeeCustomizationDetailRequest `json:"receivable,omitempty" url:"receivable,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FeeCustomizationRequest) GetPayable() *FeeCustomizationDetailRequest {
	if f == nil {
		return nil
	}
	return f.Payable
}

func (f *FeeCustomizationRequest) GetReceivable() *FeeCustomizationDetailRequest {
	if f == nil {
		return nil
	}
	return f.Receivable
}

func (f *FeeCustomizationRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeeCustomizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FeeCustomizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FeeCustomizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeeCustomizationRequest) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlatFee struct {
	// The flat amount that will be charged as a fee. For example, if the fee is $2.50, set this to 2.5.
	Amount float64 `json:"amount" url:"amount"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FlatFee) GetAmount() float64 {
	if f == nil {
		return 0
	}
	return f.Amount
}

func (f *FlatFee) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlatFee) UnmarshalJSON(data []byte) error {
	type unmarshaler FlatFee
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FlatFee(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlatFee) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type GenericPaymentMethodCustomizationRequest struct {
	// If true, this method will will not be available to the entity.
	Disabled bool `json:"disabled" url:"disabled"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GenericPaymentMethodCustomizationRequest) GetDisabled() bool {
	if g == nil {
		return false
	}
	return g.Disabled
}

func (g *GenericPaymentMethodCustomizationRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenericPaymentMethodCustomizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenericPaymentMethodCustomizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenericPaymentMethodCustomizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenericPaymentMethodCustomizationRequest) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type MetadataCustomizationRequest struct {
	// The key of the metadata field. This must be defined at the organization level, otherwise an error will be returned.
	Key string `json:"key" url:"key"`
	// If true, this field will not be available to the entity.
	Disabled bool `json:"disabled" url:"disabled"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetadataCustomizationRequest) GetKey() string {
	if m == nil {
		return ""
	}
	return m.Key
}

func (m *MetadataCustomizationRequest) GetDisabled() bool {
	if m == nil {
		return false
	}
	return m.Disabled
}

func (m *MetadataCustomizationRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataCustomizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataCustomizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataCustomizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataCustomizationRequest) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type NotificationCustomizationRequest struct {
	// If set, notifications to this role will be sent to the email address of the entity. Set as empty string to disable.
	AssumeRole *string `json:"assumeRole,omitempty" url:"assumeRole,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationCustomizationRequest) GetAssumeRole() *string {
	if n == nil {
		return nil
	}
	return n.AssumeRole
}

func (n *NotificationCustomizationRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationCustomizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationCustomizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationCustomizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationCustomizationRequest) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type OcrCustomizationRequest struct {
	// Extract line items from the invoice. Defaults to true.
	LineItems *bool `json:"lineItems,omitempty" url:"lineItems,omitempty"`
	// If true, the line items will be collapsed into a single line item. Defaults to false.
	CollapseLineItems *bool `json:"collapseLineItems,omitempty" url:"collapseLineItems,omitempty"`
	// Pull custom metadata at the invoice level. Defaults to true.
	InvoiceMetadata *bool `json:"invoiceMetadata,omitempty" url:"invoiceMetadata,omitempty"`
	// Pull custom metadata at the line item level. Defaults to true.
	LineItemMetadata *bool `json:"lineItemMetadata,omitempty" url:"lineItemMetadata,omitempty"`
	// Pull GL Account ID at the line item level. Defaults to true.
	LineItemGlAccountID *bool `json:"lineItemGlAccountId,omitempty" url:"lineItemGlAccountId,omitempty"`
	// Use AI to predict metadata from historical data. Defaults to true.
	PredictMetadata *bool `json:"predictMetadata,omitempty" url:"predictMetadata,omitempty"`
	// Pull tax and shipping information as line items. Defaults to true. If false, tax and shipping will extracted as invoice level fields.
	TaxAndShippingAsLineItems *bool `json:"taxAndShippingAsLineItems,omitempty" url:"taxAndShippingAsLineItems,omitempty"`
	// Use AI to intelligently split documents into multiple subdocuments. Defaults to false.
	SplitDocuments *bool `json:"splitDocuments,omitempty" url:"splitDocuments,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrCustomizationRequest) GetLineItems() *bool {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *OcrCustomizationRequest) GetCollapseLineItems() *bool {
	if o == nil {
		return nil
	}
	return o.CollapseLineItems
}

func (o *OcrCustomizationRequest) GetInvoiceMetadata() *bool {
	if o == nil {
		return nil
	}
	return o.InvoiceMetadata
}

func (o *OcrCustomizationRequest) GetLineItemMetadata() *bool {
	if o == nil {
		return nil
	}
	return o.LineItemMetadata
}

func (o *OcrCustomizationRequest) GetLineItemGlAccountID() *bool {
	if o == nil {
		return nil
	}
	return o.LineItemGlAccountID
}

func (o *OcrCustomizationRequest) GetPredictMetadata() *bool {
	if o == nil {
		return nil
	}
	return o.PredictMetadata
}

func (o *OcrCustomizationRequest) GetTaxAndShippingAsLineItems() *bool {
	if o == nil {
		return nil
	}
	return o.TaxAndShippingAsLineItems
}

func (o *OcrCustomizationRequest) GetSplitDocuments() *bool {
	if o == nil {
		return nil
	}
	return o.SplitDocuments
}

func (o *OcrCustomizationRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrCustomizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrCustomizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrCustomizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrCustomizationRequest) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OcrCustomizationResponse struct {
	// Extract line items from the invoice. Defaults to true.
	LineItems bool `json:"lineItems" url:"lineItems"`
	// If true, the line items will be collapsed into a single line item. Defaults to false.
	CollapseLineItems bool `json:"collapseLineItems" url:"collapseLineItems"`
	// Pull custom metadata at the invoice level. Defaults to true.
	InvoiceMetadata bool `json:"invoiceMetadata" url:"invoiceMetadata"`
	// Pull custom metadata at the line item level. Defaults to true.
	LineItemMetadata bool `json:"lineItemMetadata" url:"lineItemMetadata"`
	// Pull GL Account ID at the line item level. Defaults to true.
	LineItemGlAccountID bool `json:"lineItemGlAccountId" url:"lineItemGlAccountId"`
	// Use AI to predict metadata from historical data. Defaults to true.
	PredictMetadata bool `json:"predictMetadata" url:"predictMetadata"`
	// Pull tax and shipping information as line items. Defaults to true. If false, tax and shipping will extracted as invoice level fields.
	TaxAndShippingAsLineItems bool `json:"taxAndShippingAsLineItems" url:"taxAndShippingAsLineItems"`
	// Use AI to intelligently split documents into multiple subdocuments. Defaults to false.
	SplitDocuments bool `json:"splitDocuments" url:"splitDocuments"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OcrCustomizationResponse) GetLineItems() bool {
	if o == nil {
		return false
	}
	return o.LineItems
}

func (o *OcrCustomizationResponse) GetCollapseLineItems() bool {
	if o == nil {
		return false
	}
	return o.CollapseLineItems
}

func (o *OcrCustomizationResponse) GetInvoiceMetadata() bool {
	if o == nil {
		return false
	}
	return o.InvoiceMetadata
}

func (o *OcrCustomizationResponse) GetLineItemMetadata() bool {
	if o == nil {
		return false
	}
	return o.LineItemMetadata
}

func (o *OcrCustomizationResponse) GetLineItemGlAccountID() bool {
	if o == nil {
		return false
	}
	return o.LineItemGlAccountID
}

func (o *OcrCustomizationResponse) GetPredictMetadata() bool {
	if o == nil {
		return false
	}
	return o.PredictMetadata
}

func (o *OcrCustomizationResponse) GetTaxAndShippingAsLineItems() bool {
	if o == nil {
		return false
	}
	return o.TaxAndShippingAsLineItems
}

func (o *OcrCustomizationResponse) GetSplitDocuments() bool {
	if o == nil {
		return false
	}
	return o.SplitDocuments
}

func (o *OcrCustomizationResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OcrCustomizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler OcrCustomizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OcrCustomizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OcrCustomizationResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PaymentMethodCustomizationRequest struct {
	Type        string
	BankAccount *BankAccountPaymentMethodCustomizationRequest
	Card        *GenericPaymentMethodCustomizationRequest
	VirtualCard *GenericPaymentMethodCustomizationRequest
	Check       *CheckPaymentMethodCustomizationRequest
	Custom      *CustomPaymentMethodCustomizationRequest
	Bnpl        *GenericPaymentMethodCustomizationRequest
	OffPlatform *GenericPaymentMethodCustomizationRequest
	Utility     *GenericPaymentMethodCustomizationRequest
	Na          *GenericPaymentMethodCustomizationRequest
	Wallet      *GenericPaymentMethodCustomizationRequest
}

func (p *PaymentMethodCustomizationRequest) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PaymentMethodCustomizationRequest) GetBankAccount() *BankAccountPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.BankAccount
}

func (p *PaymentMethodCustomizationRequest) GetCard() *GenericPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.Card
}

func (p *PaymentMethodCustomizationRequest) GetVirtualCard() *GenericPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.VirtualCard
}

func (p *PaymentMethodCustomizationRequest) GetCheck() *CheckPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.Check
}

func (p *PaymentMethodCustomizationRequest) GetCustom() *CustomPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.Custom
}

func (p *PaymentMethodCustomizationRequest) GetBnpl() *GenericPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.Bnpl
}

func (p *PaymentMethodCustomizationRequest) GetOffPlatform() *GenericPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.OffPlatform
}

func (p *PaymentMethodCustomizationRequest) GetUtility() *GenericPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.Utility
}

func (p *PaymentMethodCustomizationRequest) GetNa() *GenericPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.Na
}

func (p *PaymentMethodCustomizationRequest) GetWallet() *GenericPaymentMethodCustomizationRequest {
	if p == nil {
		return nil
	}
	return p.Wallet
}

func (p *PaymentMethodCustomizationRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", p)
	}
	switch unmarshaler.Type {
	case "bankAccount":
		value := new(BankAccountPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.BankAccount = value
	case "card":
		value := new(GenericPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Card = value
	case "virtualCard":
		value := new(GenericPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.VirtualCard = value
	case "check":
		value := new(CheckPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Check = value
	case "custom":
		value := new(CustomPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Custom = value
	case "bnpl":
		value := new(GenericPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Bnpl = value
	case "offPlatform":
		value := new(GenericPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.OffPlatform = value
	case "utility":
		value := new(GenericPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Utility = value
	case "na":
		value := new(GenericPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Na = value
	case "wallet":
		value := new(GenericPaymentMethodCustomizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Wallet = value
	}
	return nil
}

func (p PaymentMethodCustomizationRequest) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.BankAccount != nil {
		return internal.MarshalJSONWithExtraProperty(p.BankAccount, "type", "bankAccount")
	}
	if p.Card != nil {
		return internal.MarshalJSONWithExtraProperty(p.Card, "type", "card")
	}
	if p.VirtualCard != nil {
		return internal.MarshalJSONWithExtraProperty(p.VirtualCard, "type", "virtualCard")
	}
	if p.Check != nil {
		return internal.MarshalJSONWithExtraProperty(p.Check, "type", "check")
	}
	if p.Custom != nil {
		return internal.MarshalJSONWithExtraProperty(p.Custom, "type", "custom")
	}
	if p.Bnpl != nil {
		return internal.MarshalJSONWithExtraProperty(p.Bnpl, "type", "bnpl")
	}
	if p.OffPlatform != nil {
		return internal.MarshalJSONWithExtraProperty(p.OffPlatform, "type", "offPlatform")
	}
	if p.Utility != nil {
		return internal.MarshalJSONWithExtraProperty(p.Utility, "type", "utility")
	}
	if p.Na != nil {
		return internal.MarshalJSONWithExtraProperty(p.Na, "type", "na")
	}
	if p.Wallet != nil {
		return internal.MarshalJSONWithExtraProperty(p.Wallet, "type", "wallet")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PaymentMethodCustomizationRequestVisitor interface {
	VisitBankAccount(*BankAccountPaymentMethodCustomizationRequest) error
	VisitCard(*GenericPaymentMethodCustomizationRequest) error
	VisitVirtualCard(*GenericPaymentMethodCustomizationRequest) error
	VisitCheck(*CheckPaymentMethodCustomizationRequest) error
	VisitCustom(*CustomPaymentMethodCustomizationRequest) error
	VisitBnpl(*GenericPaymentMethodCustomizationRequest) error
	VisitOffPlatform(*GenericPaymentMethodCustomizationRequest) error
	VisitUtility(*GenericPaymentMethodCustomizationRequest) error
	VisitNa(*GenericPaymentMethodCustomizationRequest) error
	VisitWallet(*GenericPaymentMethodCustomizationRequest) error
}

func (p *PaymentMethodCustomizationRequest) Accept(visitor PaymentMethodCustomizationRequestVisitor) error {
	if p.BankAccount != nil {
		return visitor.VisitBankAccount(p.BankAccount)
	}
	if p.Card != nil {
		return visitor.VisitCard(p.Card)
	}
	if p.VirtualCard != nil {
		return visitor.VisitVirtualCard(p.VirtualCard)
	}
	if p.Check != nil {
		return visitor.VisitCheck(p.Check)
	}
	if p.Custom != nil {
		return visitor.VisitCustom(p.Custom)
	}
	if p.Bnpl != nil {
		return visitor.VisitBnpl(p.Bnpl)
	}
	if p.OffPlatform != nil {
		return visitor.VisitOffPlatform(p.OffPlatform)
	}
	if p.Utility != nil {
		return visitor.VisitUtility(p.Utility)
	}
	if p.Na != nil {
		return visitor.VisitNa(p.Na)
	}
	if p.Wallet != nil {
		return visitor.VisitWallet(p.Wallet)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *PaymentMethodCustomizationRequest) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.BankAccount != nil {
		fields = append(fields, "bankAccount")
	}
	if p.Card != nil {
		fields = append(fields, "card")
	}
	if p.VirtualCard != nil {
		fields = append(fields, "virtualCard")
	}
	if p.Check != nil {
		fields = append(fields, "check")
	}
	if p.Custom != nil {
		fields = append(fields, "custom")
	}
	if p.Bnpl != nil {
		fields = append(fields, "bnpl")
	}
	if p.OffPlatform != nil {
		fields = append(fields, "offPlatform")
	}
	if p.Utility != nil {
		fields = append(fields, "utility")
	}
	if p.Na != nil {
		fields = append(fields, "na")
	}
	if p.Wallet != nil {
		fields = append(fields, "wallet")
	}
	if len(fields) == 0 {
		if p.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Type)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Type != "" {
		field := fields[0]
		if p.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Type,
				p,
			)
		}
	}
	return nil
}

type PaymentMethodFee struct {
	Type       string
	Percentage *PercentageFee
	Flat       *FlatFee
	// The default fee for the payment method based on your organization's default fee.
	Default *DefaultFee
}

func (p *PaymentMethodFee) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PaymentMethodFee) GetPercentage() *PercentageFee {
	if p == nil {
		return nil
	}
	return p.Percentage
}

func (p *PaymentMethodFee) GetFlat() *FlatFee {
	if p == nil {
		return nil
	}
	return p.Flat
}

func (p *PaymentMethodFee) GetDefault() *DefaultFee {
	if p == nil {
		return nil
	}
	return p.Default
}

func (p *PaymentMethodFee) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", p)
	}
	switch unmarshaler.Type {
	case "percentage":
		value := new(PercentageFee)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Percentage = value
	case "flat":
		value := new(FlatFee)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Flat = value
	case "default":
		value := new(DefaultFee)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Default = value
	}
	return nil
}

func (p PaymentMethodFee) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.Percentage != nil {
		return internal.MarshalJSONWithExtraProperty(p.Percentage, "type", "percentage")
	}
	if p.Flat != nil {
		return internal.MarshalJSONWithExtraProperty(p.Flat, "type", "flat")
	}
	if p.Default != nil {
		return internal.MarshalJSONWithExtraProperty(p.Default, "type", "default")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PaymentMethodFeeVisitor interface {
	VisitPercentage(*PercentageFee) error
	VisitFlat(*FlatFee) error
	VisitDefault(*DefaultFee) error
}

func (p *PaymentMethodFee) Accept(visitor PaymentMethodFeeVisitor) error {
	if p.Percentage != nil {
		return visitor.VisitPercentage(p.Percentage)
	}
	if p.Flat != nil {
		return visitor.VisitFlat(p.Flat)
	}
	if p.Default != nil {
		return visitor.VisitDefault(p.Default)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *PaymentMethodFee) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.Percentage != nil {
		fields = append(fields, "percentage")
	}
	if p.Flat != nil {
		fields = append(fields, "flat")
	}
	if p.Default != nil {
		fields = append(fields, "default")
	}
	if len(fields) == 0 {
		if p.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Type)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Type != "" {
		field := fields[0]
		if p.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Type,
				p,
			)
		}
	}
	return nil
}

type PercentageFee struct {
	// The percentage of the payment amount that will be charged as a fee. For example, if the fee is 2.5%, set this to 2.5.
	Amount float64 `json:"amount" url:"amount"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PercentageFee) GetAmount() float64 {
	if p == nil {
		return 0
	}
	return p.Amount
}

func (p *PercentageFee) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PercentageFee) UnmarshalJSON(data []byte) error {
	type unmarshaler PercentageFee
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PercentageFee(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PercentageFee) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type WorkflowCustomizationRequest struct {
	// If true, the invoice will be automatically advanced to the furthest stage in the payment workflow. For example, if the invoice is APPROVED, but has all necessary data to move to SCHEDULED, it will be advanced to SCHEDULED.
	AutoAdvanceInvoiceStatus *bool `json:"autoAdvanceInvoiceStatus,omitempty" url:"autoAdvanceInvoiceStatus,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WorkflowCustomizationRequest) GetAutoAdvanceInvoiceStatus() *bool {
	if w == nil {
		return nil
	}
	return w.AutoAdvanceInvoiceStatus
}

func (w *WorkflowCustomizationRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowCustomizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowCustomizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowCustomizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowCustomizationRequest) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
