// This file was auto-generated by Fern from our API Definition.

package mercoa

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/mercoa-finance/go/internal"
)

type PaymentGatewayError string

const (
	PaymentGatewayErrorNoValidPaymentGatewayFound PaymentGatewayError = "NO_VALID_PAYMENT_GATEWAY_FOUND"
	PaymentGatewayErrorPaymentGatewayUnsupported  PaymentGatewayError = "PAYMENT_GATEWAY_UNSUPPORTED"
	PaymentGatewayErrorCardDetailsInvalid         PaymentGatewayError = "CARD_DETAILS_INVALID"
)

func NewPaymentGatewayErrorFromString(s string) (PaymentGatewayError, error) {
	switch s {
	case "NO_VALID_PAYMENT_GATEWAY_FOUND":
		return PaymentGatewayErrorNoValidPaymentGatewayFound, nil
	case "PAYMENT_GATEWAY_UNSUPPORTED":
		return PaymentGatewayErrorPaymentGatewayUnsupported, nil
	case "CARD_DETAILS_INVALID":
		return PaymentGatewayErrorCardDetailsInvalid, nil
	}
	var t PaymentGatewayError
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PaymentGatewayError) Ptr() *PaymentGatewayError {
	return &p
}

type ProcessPaymentGatewayCardDetails struct {
	Type   string
	Direct *ProcessPaymentGatewayCardDetailsDirect
	Iframe *ProcessPaymentGatewayCardDetailsIframe
}

func (p *ProcessPaymentGatewayCardDetails) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *ProcessPaymentGatewayCardDetails) GetDirect() *ProcessPaymentGatewayCardDetailsDirect {
	if p == nil {
		return nil
	}
	return p.Direct
}

func (p *ProcessPaymentGatewayCardDetails) GetIframe() *ProcessPaymentGatewayCardDetailsIframe {
	if p == nil {
		return nil
	}
	return p.Iframe
}

func (p *ProcessPaymentGatewayCardDetails) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", p)
	}
	switch unmarshaler.Type {
	case "direct":
		value := new(ProcessPaymentGatewayCardDetailsDirect)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Direct = value
	case "iframe":
		value := new(ProcessPaymentGatewayCardDetailsIframe)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Iframe = value
	}
	return nil
}

func (p ProcessPaymentGatewayCardDetails) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.Direct != nil {
		return internal.MarshalJSONWithExtraProperty(p.Direct, "type", "direct")
	}
	if p.Iframe != nil {
		return internal.MarshalJSONWithExtraProperty(p.Iframe, "type", "iframe")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type ProcessPaymentGatewayCardDetailsVisitor interface {
	VisitDirect(*ProcessPaymentGatewayCardDetailsDirect) error
	VisitIframe(*ProcessPaymentGatewayCardDetailsIframe) error
}

func (p *ProcessPaymentGatewayCardDetails) Accept(visitor ProcessPaymentGatewayCardDetailsVisitor) error {
	if p.Direct != nil {
		return visitor.VisitDirect(p.Direct)
	}
	if p.Iframe != nil {
		return visitor.VisitIframe(p.Iframe)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *ProcessPaymentGatewayCardDetails) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.Direct != nil {
		fields = append(fields, "direct")
	}
	if p.Iframe != nil {
		fields = append(fields, "iframe")
	}
	if len(fields) == 0 {
		if p.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Type)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Type != "" {
		field := fields[0]
		if p.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Type,
				p,
			)
		}
	}
	return nil
}

type ProcessPaymentGatewayCardDetailsDirect struct {
	// The name on the card to use for the payment
	NameOnCard string `json:"nameOnCard" url:"nameOnCard"`
	// The number of the card to use for the payment
	CardNumber string `json:"cardNumber" url:"cardNumber"`
	// The month of the expiration date of the card to use for the payment. This must be a number between 1 and 12.
	ExpirationMonth int `json:"expirationMonth" url:"expirationMonth"`
	// The year of the expiration date of the card to use for the payment. This must be the full year, not the last two digits.
	ExpirationYear int `json:"expirationYear" url:"expirationYear"`
	// The CVV of the card to use for the payment
	Cvv string `json:"cvv" url:"cvv"`
	// The postal code of the address of the card to use for the payment
	PostalCode string `json:"postalCode" url:"postalCode"`
	// The country of the address of the card to use for the payment
	Country CountryCode `json:"country" url:"country"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetNameOnCard() string {
	if p == nil {
		return ""
	}
	return p.NameOnCard
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetCardNumber() string {
	if p == nil {
		return ""
	}
	return p.CardNumber
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetExpirationMonth() int {
	if p == nil {
		return 0
	}
	return p.ExpirationMonth
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetExpirationYear() int {
	if p == nil {
		return 0
	}
	return p.ExpirationYear
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetCvv() string {
	if p == nil {
		return ""
	}
	return p.Cvv
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetCountry() CountryCode {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayCardDetailsDirect) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayCardDetailsDirect
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayCardDetailsDirect(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayCardDetailsDirect) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayCardDetailsIframe struct {
	// The URL of the iframe that render the virtual card details
	IframeURL string `json:"iframeUrl" url:"iframeUrl"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetIframeURL() string {
	if p == nil {
		return ""
	}
	return p.IframeURL
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayCardDetailsIframe) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayCardDetailsIframe
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayCardDetailsIframe(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayCardDetailsIframe) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayCompletedResponse struct {
	// The job ID of the payment gateway processing job
	JobID string `json:"jobId" url:"jobId"`
	// The URL of the receipt that was downloaded from the payment gateway
	ReceiptURL *string `json:"receiptUrl,omitempty" url:"receiptUrl,omitempty"`
	// The URL of the playback session for the agent that processed the payment
	SessionURL *string `json:"sessionUrl,omitempty" url:"sessionUrl,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayCompletedResponse) GetJobID() string {
	if p == nil {
		return ""
	}
	return p.JobID
}

func (p *ProcessPaymentGatewayCompletedResponse) GetReceiptURL() *string {
	if p == nil {
		return nil
	}
	return p.ReceiptURL
}

func (p *ProcessPaymentGatewayCompletedResponse) GetSessionURL() *string {
	if p == nil {
		return nil
	}
	return p.SessionURL
}

func (p *ProcessPaymentGatewayCompletedResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayCompletedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayCompletedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayCompletedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayCompletedResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayFailedResponse struct {
	// The job ID of the payment gateway processing job
	JobID string `json:"jobId" url:"jobId"`
	// The error that occurred during the payment gateway processing job
	ErrorType PaymentGatewayError `json:"errorType" url:"errorType"`
	// The error message that occurred during the payment gateway processing job
	ErrorMessage *string `json:"errorMessage,omitempty" url:"errorMessage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayFailedResponse) GetJobID() string {
	if p == nil {
		return ""
	}
	return p.JobID
}

func (p *ProcessPaymentGatewayFailedResponse) GetErrorType() PaymentGatewayError {
	if p == nil {
		return ""
	}
	return p.ErrorType
}

func (p *ProcessPaymentGatewayFailedResponse) GetErrorMessage() *string {
	if p == nil {
		return nil
	}
	return p.ErrorMessage
}

func (p *ProcessPaymentGatewayFailedResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayFailedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayFailedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayFailedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayFailedResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayPendingResponse struct {
	// The job ID of the payment gateway processing job
	JobID string `json:"jobId" url:"jobId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayPendingResponse) GetJobID() string {
	if p == nil {
		return ""
	}
	return p.JobID
}

func (p *ProcessPaymentGatewayPendingResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayPendingResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayPendingResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayPendingResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayPendingResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayRequest struct {
	Type     string
	Document *ProcessPaymentGatewayRequestDocument
	HTML     *ProcessPaymentGatewayRequestHTML
}

func (p *ProcessPaymentGatewayRequest) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *ProcessPaymentGatewayRequest) GetDocument() *ProcessPaymentGatewayRequestDocument {
	if p == nil {
		return nil
	}
	return p.Document
}

func (p *ProcessPaymentGatewayRequest) GetHTML() *ProcessPaymentGatewayRequestHTML {
	if p == nil {
		return nil
	}
	return p.HTML
}

func (p *ProcessPaymentGatewayRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", p)
	}
	switch unmarshaler.Type {
	case "document":
		value := new(ProcessPaymentGatewayRequestDocument)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Document = value
	case "html":
		value := new(ProcessPaymentGatewayRequestHTML)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.HTML = value
	}
	return nil
}

func (p ProcessPaymentGatewayRequest) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.Document != nil {
		return internal.MarshalJSONWithExtraProperty(p.Document, "type", "document")
	}
	if p.HTML != nil {
		return internal.MarshalJSONWithExtraProperty(p.HTML, "type", "html")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type ProcessPaymentGatewayRequestVisitor interface {
	VisitDocument(*ProcessPaymentGatewayRequestDocument) error
	VisitHTML(*ProcessPaymentGatewayRequestHTML) error
}

func (p *ProcessPaymentGatewayRequest) Accept(visitor ProcessPaymentGatewayRequestVisitor) error {
	if p.Document != nil {
		return visitor.VisitDocument(p.Document)
	}
	if p.HTML != nil {
		return visitor.VisitHTML(p.HTML)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *ProcessPaymentGatewayRequest) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.Document != nil {
		fields = append(fields, "document")
	}
	if p.HTML != nil {
		fields = append(fields, "html")
	}
	if len(fields) == 0 {
		if p.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Type)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Type != "" {
		field := fields[0]
		if p.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Type,
				p,
			)
		}
	}
	return nil
}

type ProcessPaymentGatewayRequestDocument struct {
	// The invoice document to extract the payment gateway from in base64 format
	Document string `json:"document" url:"document"`
	// The details of the card to use for the payment
	CardDetails *ProcessPaymentGatewayCardDetails `json:"cardDetails,omitempty" url:"cardDetails,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayRequestDocument) GetDocument() string {
	if p == nil {
		return ""
	}
	return p.Document
}

func (p *ProcessPaymentGatewayRequestDocument) GetCardDetails() *ProcessPaymentGatewayCardDetails {
	if p == nil {
		return nil
	}
	return p.CardDetails
}

func (p *ProcessPaymentGatewayRequestDocument) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayRequestDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayRequestDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayRequestDocument(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayRequestDocument) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayRequestHTML struct {
	// The HTML from an email to extract the payment gateway from
	HTML string `json:"html" url:"html"`
	// The details of the card to use for the payment
	CardDetails *ProcessPaymentGatewayCardDetails `json:"cardDetails,omitempty" url:"cardDetails,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayRequestHTML) GetHTML() string {
	if p == nil {
		return ""
	}
	return p.HTML
}

func (p *ProcessPaymentGatewayRequestHTML) GetCardDetails() *ProcessPaymentGatewayCardDetails {
	if p == nil {
		return nil
	}
	return p.CardDetails
}

func (p *ProcessPaymentGatewayRequestHTML) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayRequestHTML) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayRequestHTML
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayRequestHTML(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayRequestHTML) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayResponse struct {
	JobStatus string
	Pending   *ProcessPaymentGatewayPendingResponse
	Completed *ProcessPaymentGatewayCompletedResponse
	Failed    *ProcessPaymentGatewayFailedResponse
}

func (p *ProcessPaymentGatewayResponse) GetJobStatus() string {
	if p == nil {
		return ""
	}
	return p.JobStatus
}

func (p *ProcessPaymentGatewayResponse) GetPending() *ProcessPaymentGatewayPendingResponse {
	if p == nil {
		return nil
	}
	return p.Pending
}

func (p *ProcessPaymentGatewayResponse) GetCompleted() *ProcessPaymentGatewayCompletedResponse {
	if p == nil {
		return nil
	}
	return p.Completed
}

func (p *ProcessPaymentGatewayResponse) GetFailed() *ProcessPaymentGatewayFailedResponse {
	if p == nil {
		return nil
	}
	return p.Failed
}

func (p *ProcessPaymentGatewayResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		JobStatus string `json:"jobStatus"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.JobStatus = unmarshaler.JobStatus
	if unmarshaler.JobStatus == "" {
		return fmt.Errorf("%T did not include discriminant jobStatus", p)
	}
	switch unmarshaler.JobStatus {
	case "pending":
		value := new(ProcessPaymentGatewayPendingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Pending = value
	case "completed":
		value := new(ProcessPaymentGatewayCompletedResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Completed = value
	case "failed":
		value := new(ProcessPaymentGatewayFailedResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Failed = value
	}
	return nil
}

func (p ProcessPaymentGatewayResponse) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.Pending != nil {
		return internal.MarshalJSONWithExtraProperty(p.Pending, "jobStatus", "pending")
	}
	if p.Completed != nil {
		return internal.MarshalJSONWithExtraProperty(p.Completed, "jobStatus", "completed")
	}
	if p.Failed != nil {
		return internal.MarshalJSONWithExtraProperty(p.Failed, "jobStatus", "failed")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type ProcessPaymentGatewayResponseVisitor interface {
	VisitPending(*ProcessPaymentGatewayPendingResponse) error
	VisitCompleted(*ProcessPaymentGatewayCompletedResponse) error
	VisitFailed(*ProcessPaymentGatewayFailedResponse) error
}

func (p *ProcessPaymentGatewayResponse) Accept(visitor ProcessPaymentGatewayResponseVisitor) error {
	if p.Pending != nil {
		return visitor.VisitPending(p.Pending)
	}
	if p.Completed != nil {
		return visitor.VisitCompleted(p.Completed)
	}
	if p.Failed != nil {
		return visitor.VisitFailed(p.Failed)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *ProcessPaymentGatewayResponse) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.Pending != nil {
		fields = append(fields, "pending")
	}
	if p.Completed != nil {
		fields = append(fields, "completed")
	}
	if p.Failed != nil {
		fields = append(fields, "failed")
	}
	if len(fields) == 0 {
		if p.JobStatus != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.JobStatus)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.JobStatus != "" {
		field := fields[0]
		if p.JobStatus != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.JobStatus,
				p,
			)
		}
	}
	return nil
}

type ValidatePaymentGatewayCardAcceptance string

const (
	ValidatePaymentGatewayCardAcceptanceAccepted    ValidatePaymentGatewayCardAcceptance = "ACCEPTED"
	ValidatePaymentGatewayCardAcceptanceNotAccepted ValidatePaymentGatewayCardAcceptance = "NOT_ACCEPTED"
	ValidatePaymentGatewayCardAcceptanceUnknown     ValidatePaymentGatewayCardAcceptance = "UNKNOWN"
)

func NewValidatePaymentGatewayCardAcceptanceFromString(s string) (ValidatePaymentGatewayCardAcceptance, error) {
	switch s {
	case "ACCEPTED":
		return ValidatePaymentGatewayCardAcceptanceAccepted, nil
	case "NOT_ACCEPTED":
		return ValidatePaymentGatewayCardAcceptanceNotAccepted, nil
	case "UNKNOWN":
		return ValidatePaymentGatewayCardAcceptanceUnknown, nil
	}
	var t ValidatePaymentGatewayCardAcceptance
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v ValidatePaymentGatewayCardAcceptance) Ptr() *ValidatePaymentGatewayCardAcceptance {
	return &v
}

type ValidatePaymentGatewayCardFee struct {
	Type       string
	Percentage *ValidatePaymentGatewayCardFeePercentage
	Flat       *ValidatePaymentGatewayCardFeeFlat
	None       *ValidatePaymentGatewayCardFeeNone
}

func (v *ValidatePaymentGatewayCardFee) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *ValidatePaymentGatewayCardFee) GetPercentage() *ValidatePaymentGatewayCardFeePercentage {
	if v == nil {
		return nil
	}
	return v.Percentage
}

func (v *ValidatePaymentGatewayCardFee) GetFlat() *ValidatePaymentGatewayCardFeeFlat {
	if v == nil {
		return nil
	}
	return v.Flat
}

func (v *ValidatePaymentGatewayCardFee) GetNone() *ValidatePaymentGatewayCardFeeNone {
	if v == nil {
		return nil
	}
	return v.None
}

func (v *ValidatePaymentGatewayCardFee) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	v.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", v)
	}
	switch unmarshaler.Type {
	case "percentage":
		value := new(ValidatePaymentGatewayCardFeePercentage)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Percentage = value
	case "flat":
		value := new(ValidatePaymentGatewayCardFeeFlat)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Flat = value
	case "none":
		value := new(ValidatePaymentGatewayCardFeeNone)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.None = value
	}
	return nil
}

func (v ValidatePaymentGatewayCardFee) MarshalJSON() ([]byte, error) {
	if err := v.validate(); err != nil {
		return nil, err
	}
	if v.Percentage != nil {
		return internal.MarshalJSONWithExtraProperty(v.Percentage, "type", "percentage")
	}
	if v.Flat != nil {
		return internal.MarshalJSONWithExtraProperty(v.Flat, "type", "flat")
	}
	if v.None != nil {
		return internal.MarshalJSONWithExtraProperty(v.None, "type", "none")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", v)
}

type ValidatePaymentGatewayCardFeeVisitor interface {
	VisitPercentage(*ValidatePaymentGatewayCardFeePercentage) error
	VisitFlat(*ValidatePaymentGatewayCardFeeFlat) error
	VisitNone(*ValidatePaymentGatewayCardFeeNone) error
}

func (v *ValidatePaymentGatewayCardFee) Accept(visitor ValidatePaymentGatewayCardFeeVisitor) error {
	if v.Percentage != nil {
		return visitor.VisitPercentage(v.Percentage)
	}
	if v.Flat != nil {
		return visitor.VisitFlat(v.Flat)
	}
	if v.None != nil {
		return visitor.VisitNone(v.None)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", v)
}

func (v *ValidatePaymentGatewayCardFee) validate() error {
	if v == nil {
		return fmt.Errorf("type %T is nil", v)
	}
	var fields []string
	if v.Percentage != nil {
		fields = append(fields, "percentage")
	}
	if v.Flat != nil {
		fields = append(fields, "flat")
	}
	if v.None != nil {
		fields = append(fields, "none")
	}
	if len(fields) == 0 {
		if v.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", v, v.Type)
		}
		return fmt.Errorf("type %T is empty", v)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", v, fields)
	}
	if v.Type != "" {
		field := fields[0]
		if v.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				v,
				v.Type,
				v,
			)
		}
	}
	return nil
}

type ValidatePaymentGatewayCardFeeFlat struct {
	// The fee amount in major units of the invoice currency. For example, if the fee is a flat $2.50, set this to 2.5.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayCardFeeFlat) GetValue() float64 {
	if v == nil {
		return 0
	}
	return v.Value
}

func (v *ValidatePaymentGatewayCardFeeFlat) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayCardFeeFlat) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayCardFeeFlat
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayCardFeeFlat(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayCardFeeFlat) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayCardFeeNone struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayCardFeeNone) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayCardFeeNone) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayCardFeeNone
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayCardFeeNone(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayCardFeeNone) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayCardFeePercentage struct {
	// The fee percentage in bps. For example, if the fee is 2.5% and the payment amount is $100, set this to 250.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayCardFeePercentage) GetValue() float64 {
	if v == nil {
		return 0
	}
	return v.Value
}

func (v *ValidatePaymentGatewayCardFeePercentage) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayCardFeePercentage) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayCardFeePercentage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayCardFeePercentage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayCardFeePercentage) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayCardResponse struct {
	// Whether the payment gateway accepts card payments
	Eligibility ValidatePaymentGatewayCardAcceptance `json:"eligibility" url:"eligibility"`
	// The fee that was extracted from the gateway
	Fee *ValidatePaymentGatewayCardFee `json:"fee,omitempty" url:"fee,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayCardResponse) GetEligibility() ValidatePaymentGatewayCardAcceptance {
	if v == nil {
		return ""
	}
	return v.Eligibility
}

func (v *ValidatePaymentGatewayCardResponse) GetFee() *ValidatePaymentGatewayCardFee {
	if v == nil {
		return nil
	}
	return v.Fee
}

func (v *ValidatePaymentGatewayCardResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayCardResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayCardResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayCardResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayCardResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayCompletedResponse struct {
	// The job ID of the payment gateway validation job
	JobID string `json:"jobId" url:"jobId"`
	// The payment gateway URL that was found in the document
	PaymentGatewayURL *string `json:"paymentGatewayUrl,omitempty" url:"paymentGatewayUrl,omitempty"`
	// The URL of the playback session for the agent that validated the payment gateway
	SessionURL *string `json:"sessionUrl,omitempty" url:"sessionUrl,omitempty"`
	// Data on the card payments that were extracted from the gateway
	Card *ValidatePaymentGatewayCardResponse `json:"card,omitempty" url:"card,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayCompletedResponse) GetJobID() string {
	if v == nil {
		return ""
	}
	return v.JobID
}

func (v *ValidatePaymentGatewayCompletedResponse) GetPaymentGatewayURL() *string {
	if v == nil {
		return nil
	}
	return v.PaymentGatewayURL
}

func (v *ValidatePaymentGatewayCompletedResponse) GetSessionURL() *string {
	if v == nil {
		return nil
	}
	return v.SessionURL
}

func (v *ValidatePaymentGatewayCompletedResponse) GetCard() *ValidatePaymentGatewayCardResponse {
	if v == nil {
		return nil
	}
	return v.Card
}

func (v *ValidatePaymentGatewayCompletedResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayCompletedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayCompletedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayCompletedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayCompletedResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayFailedResponse struct {
	// The job ID of the payment gateway validation job
	JobID string `json:"jobId" url:"jobId"`
	// The error that occurred during the payment gateway validation job
	ErrorType PaymentGatewayError `json:"errorType" url:"errorType"`
	// The error message that occurred during the payment gateway validation job
	ErrorMessage *string `json:"errorMessage,omitempty" url:"errorMessage,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayFailedResponse) GetJobID() string {
	if v == nil {
		return ""
	}
	return v.JobID
}

func (v *ValidatePaymentGatewayFailedResponse) GetErrorType() PaymentGatewayError {
	if v == nil {
		return ""
	}
	return v.ErrorType
}

func (v *ValidatePaymentGatewayFailedResponse) GetErrorMessage() *string {
	if v == nil {
		return nil
	}
	return v.ErrorMessage
}

func (v *ValidatePaymentGatewayFailedResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayFailedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayFailedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayFailedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayFailedResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayPendingResponse struct {
	// The job ID of the payment gateway validation job
	JobID string `json:"jobId" url:"jobId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayPendingResponse) GetJobID() string {
	if v == nil {
		return ""
	}
	return v.JobID
}

func (v *ValidatePaymentGatewayPendingResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayPendingResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayPendingResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayPendingResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayPendingResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayRequest struct {
	Type     string
	Document *ValidatePaymentGatewayRequestDocument
	HTML     *ValidatePaymentGatewayRequestHTML
}

func (v *ValidatePaymentGatewayRequest) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *ValidatePaymentGatewayRequest) GetDocument() *ValidatePaymentGatewayRequestDocument {
	if v == nil {
		return nil
	}
	return v.Document
}

func (v *ValidatePaymentGatewayRequest) GetHTML() *ValidatePaymentGatewayRequestHTML {
	if v == nil {
		return nil
	}
	return v.HTML
}

func (v *ValidatePaymentGatewayRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	v.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", v)
	}
	switch unmarshaler.Type {
	case "document":
		value := new(ValidatePaymentGatewayRequestDocument)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Document = value
	case "html":
		value := new(ValidatePaymentGatewayRequestHTML)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.HTML = value
	}
	return nil
}

func (v ValidatePaymentGatewayRequest) MarshalJSON() ([]byte, error) {
	if err := v.validate(); err != nil {
		return nil, err
	}
	if v.Document != nil {
		return internal.MarshalJSONWithExtraProperty(v.Document, "type", "document")
	}
	if v.HTML != nil {
		return internal.MarshalJSONWithExtraProperty(v.HTML, "type", "html")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", v)
}

type ValidatePaymentGatewayRequestVisitor interface {
	VisitDocument(*ValidatePaymentGatewayRequestDocument) error
	VisitHTML(*ValidatePaymentGatewayRequestHTML) error
}

func (v *ValidatePaymentGatewayRequest) Accept(visitor ValidatePaymentGatewayRequestVisitor) error {
	if v.Document != nil {
		return visitor.VisitDocument(v.Document)
	}
	if v.HTML != nil {
		return visitor.VisitHTML(v.HTML)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", v)
}

func (v *ValidatePaymentGatewayRequest) validate() error {
	if v == nil {
		return fmt.Errorf("type %T is nil", v)
	}
	var fields []string
	if v.Document != nil {
		fields = append(fields, "document")
	}
	if v.HTML != nil {
		fields = append(fields, "html")
	}
	if len(fields) == 0 {
		if v.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", v, v.Type)
		}
		return fmt.Errorf("type %T is empty", v)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", v, fields)
	}
	if v.Type != "" {
		field := fields[0]
		if v.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				v,
				v.Type,
				v,
			)
		}
	}
	return nil
}

type ValidatePaymentGatewayRequestDocument struct {
	// The invoice document to extract the payment gateway from in base64 format
	Document string `json:"document" url:"document"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayRequestDocument) GetDocument() string {
	if v == nil {
		return ""
	}
	return v.Document
}

func (v *ValidatePaymentGatewayRequestDocument) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayRequestDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayRequestDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayRequestDocument(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayRequestDocument) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayRequestHTML struct {
	// The HTML from an email to extract the payment gateway from
	HTML string `json:"html" url:"html"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayRequestHTML) GetHTML() string {
	if v == nil {
		return ""
	}
	return v.HTML
}

func (v *ValidatePaymentGatewayRequestHTML) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayRequestHTML) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayRequestHTML
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayRequestHTML(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayRequestHTML) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayResponse struct {
	JobStatus string
	Pending   *ValidatePaymentGatewayPendingResponse
	Completed *ValidatePaymentGatewayCompletedResponse
	Failed    *ValidatePaymentGatewayFailedResponse
}

func (v *ValidatePaymentGatewayResponse) GetJobStatus() string {
	if v == nil {
		return ""
	}
	return v.JobStatus
}

func (v *ValidatePaymentGatewayResponse) GetPending() *ValidatePaymentGatewayPendingResponse {
	if v == nil {
		return nil
	}
	return v.Pending
}

func (v *ValidatePaymentGatewayResponse) GetCompleted() *ValidatePaymentGatewayCompletedResponse {
	if v == nil {
		return nil
	}
	return v.Completed
}

func (v *ValidatePaymentGatewayResponse) GetFailed() *ValidatePaymentGatewayFailedResponse {
	if v == nil {
		return nil
	}
	return v.Failed
}

func (v *ValidatePaymentGatewayResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		JobStatus string `json:"jobStatus"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	v.JobStatus = unmarshaler.JobStatus
	if unmarshaler.JobStatus == "" {
		return fmt.Errorf("%T did not include discriminant jobStatus", v)
	}
	switch unmarshaler.JobStatus {
	case "pending":
		value := new(ValidatePaymentGatewayPendingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Pending = value
	case "completed":
		value := new(ValidatePaymentGatewayCompletedResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Completed = value
	case "failed":
		value := new(ValidatePaymentGatewayFailedResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Failed = value
	}
	return nil
}

func (v ValidatePaymentGatewayResponse) MarshalJSON() ([]byte, error) {
	if err := v.validate(); err != nil {
		return nil, err
	}
	if v.Pending != nil {
		return internal.MarshalJSONWithExtraProperty(v.Pending, "jobStatus", "pending")
	}
	if v.Completed != nil {
		return internal.MarshalJSONWithExtraProperty(v.Completed, "jobStatus", "completed")
	}
	if v.Failed != nil {
		return internal.MarshalJSONWithExtraProperty(v.Failed, "jobStatus", "failed")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", v)
}

type ValidatePaymentGatewayResponseVisitor interface {
	VisitPending(*ValidatePaymentGatewayPendingResponse) error
	VisitCompleted(*ValidatePaymentGatewayCompletedResponse) error
	VisitFailed(*ValidatePaymentGatewayFailedResponse) error
}

func (v *ValidatePaymentGatewayResponse) Accept(visitor ValidatePaymentGatewayResponseVisitor) error {
	if v.Pending != nil {
		return visitor.VisitPending(v.Pending)
	}
	if v.Completed != nil {
		return visitor.VisitCompleted(v.Completed)
	}
	if v.Failed != nil {
		return visitor.VisitFailed(v.Failed)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", v)
}

func (v *ValidatePaymentGatewayResponse) validate() error {
	if v == nil {
		return fmt.Errorf("type %T is nil", v)
	}
	var fields []string
	if v.Pending != nil {
		fields = append(fields, "pending")
	}
	if v.Completed != nil {
		fields = append(fields, "completed")
	}
	if v.Failed != nil {
		fields = append(fields, "failed")
	}
	if len(fields) == 0 {
		if v.JobStatus != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", v, v.JobStatus)
		}
		return fmt.Errorf("type %T is empty", v)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", v, fields)
	}
	if v.JobStatus != "" {
		field := fields[0]
		if v.JobStatus != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				v,
				v.JobStatus,
				v,
			)
		}
	}
	return nil
}
