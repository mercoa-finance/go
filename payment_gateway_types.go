// This file was auto-generated by Fern from our API Definition.

package mercoa

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/mercoa-finance/go/internal"
	time "time"
)

type EphemeralKeyEndpoint struct {
	// The URL endpoint to call for generating ephemeral keys
	URL string `json:"url" url:"url"`
	// The HTTP method to use for the request
	Method string `json:"method" url:"method"`
	// The headers to include in the request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.
	Headers map[string]string `json:"headers,omitempty" url:"headers,omitempty"`
	// The body to include in the POST request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.
	PostBody *string `json:"postBody,omitempty" url:"postBody,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EphemeralKeyEndpoint) GetURL() string {
	if e == nil {
		return ""
	}
	return e.URL
}

func (e *EphemeralKeyEndpoint) GetMethod() string {
	if e == nil {
		return ""
	}
	return e.Method
}

func (e *EphemeralKeyEndpoint) GetHeaders() map[string]string {
	if e == nil {
		return nil
	}
	return e.Headers
}

func (e *EphemeralKeyEndpoint) GetPostBody() *string {
	if e == nil {
		return nil
	}
	return e.PostBody
}

func (e *EphemeralKeyEndpoint) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EphemeralKeyEndpoint) UnmarshalJSON(data []byte) error {
	type unmarshaler EphemeralKeyEndpoint
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EphemeralKeyEndpoint(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EphemeralKeyEndpoint) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type PaymentGatewayAttempt struct {
	// The unique identifier for the payment gateway attempt
	ID string `json:"id" url:"id"`
	// The status of the attempt
	Status PaymentGatewayJobStatus `json:"status" url:"status"`
	// The amount processed in this attempt
	Amount *float64 `json:"amount,omitempty" url:"amount,omitempty"`
	// The URL of the receipt for this attempt
	ReceiptURL *string `json:"receiptUrl,omitempty" url:"receiptUrl,omitempty"`
	// The timestamp when the attempt was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentGatewayAttempt) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PaymentGatewayAttempt) GetStatus() PaymentGatewayJobStatus {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *PaymentGatewayAttempt) GetAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.Amount
}

func (p *PaymentGatewayAttempt) GetReceiptURL() *string {
	if p == nil {
		return nil
	}
	return p.ReceiptURL
}

func (p *PaymentGatewayAttempt) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PaymentGatewayAttempt) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentGatewayAttempt) UnmarshalJSON(data []byte) error {
	type embed PaymentGatewayAttempt
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PaymentGatewayAttempt(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentGatewayAttempt) MarshalJSON() ([]byte, error) {
	type embed PaymentGatewayAttempt
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PaymentGatewayAttempt) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentGatewayError string

const (
	PaymentGatewayErrorNoValidPaymentGatewayFound PaymentGatewayError = "NO_VALID_PAYMENT_GATEWAY_FOUND"
	PaymentGatewayErrorPaymentGatewayUnsupported  PaymentGatewayError = "PAYMENT_GATEWAY_UNSUPPORTED"
	PaymentGatewayErrorCardDetailsInvalid         PaymentGatewayError = "CARD_DETAILS_INVALID"
	PaymentGatewayErrorCardDeclined               PaymentGatewayError = "CARD_DECLINED"
	PaymentGatewayErrorInvoiceAmountMismatch      PaymentGatewayError = "INVOICE_AMOUNT_MISMATCH"
)

func NewPaymentGatewayErrorFromString(s string) (PaymentGatewayError, error) {
	switch s {
	case "NO_VALID_PAYMENT_GATEWAY_FOUND":
		return PaymentGatewayErrorNoValidPaymentGatewayFound, nil
	case "PAYMENT_GATEWAY_UNSUPPORTED":
		return PaymentGatewayErrorPaymentGatewayUnsupported, nil
	case "CARD_DETAILS_INVALID":
		return PaymentGatewayErrorCardDetailsInvalid, nil
	case "CARD_DECLINED":
		return PaymentGatewayErrorCardDeclined, nil
	case "INVOICE_AMOUNT_MISMATCH":
		return PaymentGatewayErrorInvoiceAmountMismatch, nil
	}
	var t PaymentGatewayError
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PaymentGatewayError) Ptr() *PaymentGatewayError {
	return &p
}

type PaymentGatewayJobOrderByField string

const (
	PaymentGatewayJobOrderByFieldCreatedAt PaymentGatewayJobOrderByField = "CREATED_AT"
	PaymentGatewayJobOrderByFieldUpdatedAt PaymentGatewayJobOrderByField = "UPDATED_AT"
	PaymentGatewayJobOrderByFieldStatus    PaymentGatewayJobOrderByField = "STATUS"
)

func NewPaymentGatewayJobOrderByFieldFromString(s string) (PaymentGatewayJobOrderByField, error) {
	switch s {
	case "CREATED_AT":
		return PaymentGatewayJobOrderByFieldCreatedAt, nil
	case "UPDATED_AT":
		return PaymentGatewayJobOrderByFieldUpdatedAt, nil
	case "STATUS":
		return PaymentGatewayJobOrderByFieldStatus, nil
	}
	var t PaymentGatewayJobOrderByField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PaymentGatewayJobOrderByField) Ptr() *PaymentGatewayJobOrderByField {
	return &p
}

type PaymentGatewayJobStatus string

const (
	PaymentGatewayJobStatusPending   PaymentGatewayJobStatus = "PENDING"
	PaymentGatewayJobStatusCompleted PaymentGatewayJobStatus = "COMPLETED"
	PaymentGatewayJobStatusFailed    PaymentGatewayJobStatus = "FAILED"
)

func NewPaymentGatewayJobStatusFromString(s string) (PaymentGatewayJobStatus, error) {
	switch s {
	case "PENDING":
		return PaymentGatewayJobStatusPending, nil
	case "COMPLETED":
		return PaymentGatewayJobStatusCompleted, nil
	case "FAILED":
		return PaymentGatewayJobStatusFailed, nil
	}
	var t PaymentGatewayJobStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PaymentGatewayJobStatus) Ptr() *PaymentGatewayJobStatus {
	return &p
}

type ProcessPaymentGatewayAchDetails struct {
	// The routing number of the ACH account
	RoutingNumber string `json:"routingNumber" url:"routingNumber"`
	// The account number of the ACH account
	AccountNumber string `json:"accountNumber" url:"accountNumber"`
	// The name on the ACH account
	AccountName *string `json:"accountName,omitempty" url:"accountName,omitempty"`
	// The type of bank account (checking or savings)
	AccountType *BankType `json:"accountType,omitempty" url:"accountType,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayAchDetails) GetRoutingNumber() string {
	if p == nil {
		return ""
	}
	return p.RoutingNumber
}

func (p *ProcessPaymentGatewayAchDetails) GetAccountNumber() string {
	if p == nil {
		return ""
	}
	return p.AccountNumber
}

func (p *ProcessPaymentGatewayAchDetails) GetAccountName() *string {
	if p == nil {
		return nil
	}
	return p.AccountName
}

func (p *ProcessPaymentGatewayAchDetails) GetAccountType() *BankType {
	if p == nil {
		return nil
	}
	return p.AccountType
}

func (p *ProcessPaymentGatewayAchDetails) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayAchDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayAchDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayAchDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayAchDetails) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayCardDetails struct {
	Type          string
	Direct        *ProcessPaymentGatewayCardDetailsDirect
	Iframe        *ProcessPaymentGatewayCardDetailsIframe
	StripeIssuing *ProcessPaymentGatewayCardDetailsStripeIssuing
	Lithic        *ProcessPaymentGatewayCardDetailsLithic
}

func (p *ProcessPaymentGatewayCardDetails) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *ProcessPaymentGatewayCardDetails) GetDirect() *ProcessPaymentGatewayCardDetailsDirect {
	if p == nil {
		return nil
	}
	return p.Direct
}

func (p *ProcessPaymentGatewayCardDetails) GetIframe() *ProcessPaymentGatewayCardDetailsIframe {
	if p == nil {
		return nil
	}
	return p.Iframe
}

func (p *ProcessPaymentGatewayCardDetails) GetStripeIssuing() *ProcessPaymentGatewayCardDetailsStripeIssuing {
	if p == nil {
		return nil
	}
	return p.StripeIssuing
}

func (p *ProcessPaymentGatewayCardDetails) GetLithic() *ProcessPaymentGatewayCardDetailsLithic {
	if p == nil {
		return nil
	}
	return p.Lithic
}

func (p *ProcessPaymentGatewayCardDetails) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", p)
	}
	switch unmarshaler.Type {
	case "direct":
		value := new(ProcessPaymentGatewayCardDetailsDirect)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Direct = value
	case "iframe":
		value := new(ProcessPaymentGatewayCardDetailsIframe)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Iframe = value
	case "stripeIssuing":
		value := new(ProcessPaymentGatewayCardDetailsStripeIssuing)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.StripeIssuing = value
	case "lithic":
		value := new(ProcessPaymentGatewayCardDetailsLithic)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Lithic = value
	}
	return nil
}

func (p ProcessPaymentGatewayCardDetails) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.Direct != nil {
		return internal.MarshalJSONWithExtraProperty(p.Direct, "type", "direct")
	}
	if p.Iframe != nil {
		return internal.MarshalJSONWithExtraProperty(p.Iframe, "type", "iframe")
	}
	if p.StripeIssuing != nil {
		return internal.MarshalJSONWithExtraProperty(p.StripeIssuing, "type", "stripeIssuing")
	}
	if p.Lithic != nil {
		return internal.MarshalJSONWithExtraProperty(p.Lithic, "type", "lithic")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type ProcessPaymentGatewayCardDetailsVisitor interface {
	VisitDirect(*ProcessPaymentGatewayCardDetailsDirect) error
	VisitIframe(*ProcessPaymentGatewayCardDetailsIframe) error
	VisitStripeIssuing(*ProcessPaymentGatewayCardDetailsStripeIssuing) error
	VisitLithic(*ProcessPaymentGatewayCardDetailsLithic) error
}

func (p *ProcessPaymentGatewayCardDetails) Accept(visitor ProcessPaymentGatewayCardDetailsVisitor) error {
	if p.Direct != nil {
		return visitor.VisitDirect(p.Direct)
	}
	if p.Iframe != nil {
		return visitor.VisitIframe(p.Iframe)
	}
	if p.StripeIssuing != nil {
		return visitor.VisitStripeIssuing(p.StripeIssuing)
	}
	if p.Lithic != nil {
		return visitor.VisitLithic(p.Lithic)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *ProcessPaymentGatewayCardDetails) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.Direct != nil {
		fields = append(fields, "direct")
	}
	if p.Iframe != nil {
		fields = append(fields, "iframe")
	}
	if p.StripeIssuing != nil {
		fields = append(fields, "stripeIssuing")
	}
	if p.Lithic != nil {
		fields = append(fields, "lithic")
	}
	if len(fields) == 0 {
		if p.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Type)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Type != "" {
		field := fields[0]
		if p.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Type,
				p,
			)
		}
	}
	return nil
}

type ProcessPaymentGatewayCardDetailsBase struct {
	// The first name of the card user
	FirstName string `json:"firstName" url:"firstName"`
	// The last name of the card user
	LastName string `json:"lastName" url:"lastName"`
	// The postal code of the address of the card
	PostalCode string `json:"postalCode" url:"postalCode"`
	// The country of the address of the card
	Country CountryCode `json:"country" url:"country"`
	// The type of card (credit or debit). Defaults to debit.
	CardType *ProcessPaymentGatewayCardType `json:"cardType,omitempty" url:"cardType,omitempty"`
	// The phone number of the card user
	PhoneNumber *string `json:"phoneNumber,omitempty" url:"phoneNumber,omitempty"`
	// The email of the card user
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The full address of the card user
	FullAddress *string `json:"fullAddress,omitempty" url:"fullAddress,omitempty"`
	// The details of the fallback ACH account to use for the payment. This will be used if a fee is charged for card processing.
	AchDetails *ProcessPaymentGatewayAchDetails `json:"achDetails,omitempty" url:"achDetails,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetFirstName() string {
	if p == nil {
		return ""
	}
	return p.FirstName
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetLastName() string {
	if p == nil {
		return ""
	}
	return p.LastName
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetCountry() CountryCode {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetCardType() *ProcessPaymentGatewayCardType {
	if p == nil {
		return nil
	}
	return p.CardType
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetPhoneNumber() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumber
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetFullAddress() *string {
	if p == nil {
		return nil
	}
	return p.FullAddress
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetAchDetails() *ProcessPaymentGatewayAchDetails {
	if p == nil {
		return nil
	}
	return p.AchDetails
}

func (p *ProcessPaymentGatewayCardDetailsBase) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayCardDetailsBase) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayCardDetailsBase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayCardDetailsBase(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayCardDetailsBase) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayCardDetailsDirect struct {
	// The first name of the card user
	FirstName string `json:"firstName" url:"firstName"`
	// The last name of the card user
	LastName string `json:"lastName" url:"lastName"`
	// The postal code of the address of the card
	PostalCode string `json:"postalCode" url:"postalCode"`
	// The country of the address of the card
	Country CountryCode `json:"country" url:"country"`
	// The type of card (credit or debit). Defaults to debit.
	CardType *ProcessPaymentGatewayCardType `json:"cardType,omitempty" url:"cardType,omitempty"`
	// The phone number of the card user
	PhoneNumber *string `json:"phoneNumber,omitempty" url:"phoneNumber,omitempty"`
	// The email of the card user
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The full address of the card user
	FullAddress *string `json:"fullAddress,omitempty" url:"fullAddress,omitempty"`
	// The details of the fallback ACH account to use for the payment. This will be used if a fee is charged for card processing.
	AchDetails *ProcessPaymentGatewayAchDetails `json:"achDetails,omitempty" url:"achDetails,omitempty"`
	// The number of the card to use for the payment
	CardNumber string `json:"cardNumber" url:"cardNumber"`
	// The month of the expiration date of the card to use for the payment. This must be a number between 1 and 12.
	ExpirationMonth int `json:"expirationMonth" url:"expirationMonth"`
	// The year of the expiration date of the card to use for the payment. This must be the full year, not the last two digits.
	ExpirationYear int `json:"expirationYear" url:"expirationYear"`
	// The CVV of the card to use for the payment
	Cvv string `json:"cvv" url:"cvv"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetFirstName() string {
	if p == nil {
		return ""
	}
	return p.FirstName
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetLastName() string {
	if p == nil {
		return ""
	}
	return p.LastName
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetCountry() CountryCode {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetCardType() *ProcessPaymentGatewayCardType {
	if p == nil {
		return nil
	}
	return p.CardType
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetPhoneNumber() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumber
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetFullAddress() *string {
	if p == nil {
		return nil
	}
	return p.FullAddress
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetAchDetails() *ProcessPaymentGatewayAchDetails {
	if p == nil {
		return nil
	}
	return p.AchDetails
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetCardNumber() string {
	if p == nil {
		return ""
	}
	return p.CardNumber
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetExpirationMonth() int {
	if p == nil {
		return 0
	}
	return p.ExpirationMonth
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetExpirationYear() int {
	if p == nil {
		return 0
	}
	return p.ExpirationYear
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetCvv() string {
	if p == nil {
		return ""
	}
	return p.Cvv
}

func (p *ProcessPaymentGatewayCardDetailsDirect) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayCardDetailsDirect) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayCardDetailsDirect
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayCardDetailsDirect(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayCardDetailsDirect) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayCardDetailsIframe struct {
	// The first name of the card user
	FirstName string `json:"firstName" url:"firstName"`
	// The last name of the card user
	LastName string `json:"lastName" url:"lastName"`
	// The postal code of the address of the card
	PostalCode string `json:"postalCode" url:"postalCode"`
	// The country of the address of the card
	Country CountryCode `json:"country" url:"country"`
	// The type of card (credit or debit). Defaults to debit.
	CardType *ProcessPaymentGatewayCardType `json:"cardType,omitempty" url:"cardType,omitempty"`
	// The phone number of the card user
	PhoneNumber *string `json:"phoneNumber,omitempty" url:"phoneNumber,omitempty"`
	// The email of the card user
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The full address of the card user
	FullAddress *string `json:"fullAddress,omitempty" url:"fullAddress,omitempty"`
	// The details of the fallback ACH account to use for the payment. This will be used if a fee is charged for card processing.
	AchDetails *ProcessPaymentGatewayAchDetails `json:"achDetails,omitempty" url:"achDetails,omitempty"`
	// The URL of the iframe that render the virtual card details
	IframeURL string `json:"iframeUrl" url:"iframeUrl"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetFirstName() string {
	if p == nil {
		return ""
	}
	return p.FirstName
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetLastName() string {
	if p == nil {
		return ""
	}
	return p.LastName
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetCountry() CountryCode {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetCardType() *ProcessPaymentGatewayCardType {
	if p == nil {
		return nil
	}
	return p.CardType
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetPhoneNumber() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumber
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetFullAddress() *string {
	if p == nil {
		return nil
	}
	return p.FullAddress
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetAchDetails() *ProcessPaymentGatewayAchDetails {
	if p == nil {
		return nil
	}
	return p.AchDetails
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetIframeURL() string {
	if p == nil {
		return ""
	}
	return p.IframeURL
}

func (p *ProcessPaymentGatewayCardDetailsIframe) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayCardDetailsIframe) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayCardDetailsIframe
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayCardDetailsIframe(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayCardDetailsIframe) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayCardDetailsLithic struct {
	// The first name of the card user
	FirstName string `json:"firstName" url:"firstName"`
	// The last name of the card user
	LastName string `json:"lastName" url:"lastName"`
	// The postal code of the address of the card
	PostalCode string `json:"postalCode" url:"postalCode"`
	// The country of the address of the card
	Country CountryCode `json:"country" url:"country"`
	// The type of card (credit or debit). Defaults to debit.
	CardType *ProcessPaymentGatewayCardType `json:"cardType,omitempty" url:"cardType,omitempty"`
	// The phone number of the card user
	PhoneNumber *string `json:"phoneNumber,omitempty" url:"phoneNumber,omitempty"`
	// The email of the card user
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The full address of the card user
	FullAddress *string `json:"fullAddress,omitempty" url:"fullAddress,omitempty"`
	// The details of the fallback ACH account to use for the payment. This will be used if a fee is charged for card processing.
	AchDetails *ProcessPaymentGatewayAchDetails `json:"achDetails,omitempty" url:"achDetails,omitempty"`
	// The base64-encoded embed request for the Lithic virtual card
	EmbedRequest string `json:"embedRequest" url:"embedRequest"`
	// The HMAC signature for the embed request
	Hmac string `json:"hmac" url:"hmac"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetFirstName() string {
	if p == nil {
		return ""
	}
	return p.FirstName
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetLastName() string {
	if p == nil {
		return ""
	}
	return p.LastName
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetCountry() CountryCode {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetCardType() *ProcessPaymentGatewayCardType {
	if p == nil {
		return nil
	}
	return p.CardType
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetPhoneNumber() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumber
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetFullAddress() *string {
	if p == nil {
		return nil
	}
	return p.FullAddress
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetAchDetails() *ProcessPaymentGatewayAchDetails {
	if p == nil {
		return nil
	}
	return p.AchDetails
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetEmbedRequest() string {
	if p == nil {
		return ""
	}
	return p.EmbedRequest
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetHmac() string {
	if p == nil {
		return ""
	}
	return p.Hmac
}

func (p *ProcessPaymentGatewayCardDetailsLithic) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayCardDetailsLithic) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayCardDetailsLithic
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayCardDetailsLithic(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayCardDetailsLithic) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayCardDetailsStripeIssuing struct {
	// The first name of the card user
	FirstName string `json:"firstName" url:"firstName"`
	// The last name of the card user
	LastName string `json:"lastName" url:"lastName"`
	// The postal code of the address of the card
	PostalCode string `json:"postalCode" url:"postalCode"`
	// The country of the address of the card
	Country CountryCode `json:"country" url:"country"`
	// The type of card (credit or debit). Defaults to debit.
	CardType *ProcessPaymentGatewayCardType `json:"cardType,omitempty" url:"cardType,omitempty"`
	// The phone number of the card user
	PhoneNumber *string `json:"phoneNumber,omitempty" url:"phoneNumber,omitempty"`
	// The email of the card user
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The full address of the card user
	FullAddress *string `json:"fullAddress,omitempty" url:"fullAddress,omitempty"`
	// The details of the fallback ACH account to use for the payment. This will be used if a fee is charged for card processing.
	AchDetails *ProcessPaymentGatewayAchDetails `json:"achDetails,omitempty" url:"achDetails,omitempty"`
	// The Stripe Issuing card ID
	StripeCardID string `json:"stripeCardId" url:"stripeCardId"`
	// The Stripe publishable key for the Issuing Elements
	StripePublishableKey string `json:"stripePublishableKey" url:"stripePublishableKey"`
	// The Stripe account ID (optional, used for connected accounts)
	StripeAccountID *string `json:"stripeAccountId,omitempty" url:"stripeAccountId,omitempty"`
	// The endpoint configuration for generating ephemeral keys. Expects a JSON response with a `ephemeralKeySecret` field.
	EphemeralKeyEndpoint *EphemeralKeyEndpoint `json:"ephemeralKeyEndpoint,omitempty" url:"ephemeralKeyEndpoint,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetFirstName() string {
	if p == nil {
		return ""
	}
	return p.FirstName
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetLastName() string {
	if p == nil {
		return ""
	}
	return p.LastName
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetCountry() CountryCode {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetCardType() *ProcessPaymentGatewayCardType {
	if p == nil {
		return nil
	}
	return p.CardType
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetPhoneNumber() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumber
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetFullAddress() *string {
	if p == nil {
		return nil
	}
	return p.FullAddress
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetAchDetails() *ProcessPaymentGatewayAchDetails {
	if p == nil {
		return nil
	}
	return p.AchDetails
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetStripeCardID() string {
	if p == nil {
		return ""
	}
	return p.StripeCardID
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetStripePublishableKey() string {
	if p == nil {
		return ""
	}
	return p.StripePublishableKey
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetStripeAccountID() *string {
	if p == nil {
		return nil
	}
	return p.StripeAccountID
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetEphemeralKeyEndpoint() *EphemeralKeyEndpoint {
	if p == nil {
		return nil
	}
	return p.EphemeralKeyEndpoint
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayCardDetailsStripeIssuing
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayCardDetailsStripeIssuing(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayCardDetailsStripeIssuing) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayCardType string

const (
	ProcessPaymentGatewayCardTypeCredit ProcessPaymentGatewayCardType = "credit"
	ProcessPaymentGatewayCardTypeDebit  ProcessPaymentGatewayCardType = "debit"
)

func NewProcessPaymentGatewayCardTypeFromString(s string) (ProcessPaymentGatewayCardType, error) {
	switch s {
	case "credit":
		return ProcessPaymentGatewayCardTypeCredit, nil
	case "debit":
		return ProcessPaymentGatewayCardTypeDebit, nil
	}
	var t ProcessPaymentGatewayCardType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessPaymentGatewayCardType) Ptr() *ProcessPaymentGatewayCardType {
	return &p
}

type ProcessPaymentGatewayFailedResponse struct {
	// The job ID of the payment gateway processing job
	JobID string `json:"jobId" url:"jobId"`
	// The error that occurred during the payment gateway processing job
	ErrorType PaymentGatewayError `json:"errorType" url:"errorType"`
	// The error message that occurred during the payment gateway processing job
	ErrorMessage *string `json:"errorMessage,omitempty" url:"errorMessage,omitempty"`
	// The timestamp when the job was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// The timestamp when the job was last updated
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayFailedResponse) GetJobID() string {
	if p == nil {
		return ""
	}
	return p.JobID
}

func (p *ProcessPaymentGatewayFailedResponse) GetErrorType() PaymentGatewayError {
	if p == nil {
		return ""
	}
	return p.ErrorType
}

func (p *ProcessPaymentGatewayFailedResponse) GetErrorMessage() *string {
	if p == nil {
		return nil
	}
	return p.ErrorMessage
}

func (p *ProcessPaymentGatewayFailedResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *ProcessPaymentGatewayFailedResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *ProcessPaymentGatewayFailedResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayFailedResponse) UnmarshalJSON(data []byte) error {
	type embed ProcessPaymentGatewayFailedResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayFailedResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayFailedResponse) MarshalJSON() ([]byte, error) {
	type embed ProcessPaymentGatewayFailedResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *ProcessPaymentGatewayFailedResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayPendingResponse struct {
	// The job ID of the payment gateway processing job
	JobID string `json:"jobId" url:"jobId"`
	// The timestamp when the job was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// The timestamp when the job was last updated
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayPendingResponse) GetJobID() string {
	if p == nil {
		return ""
	}
	return p.JobID
}

func (p *ProcessPaymentGatewayPendingResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *ProcessPaymentGatewayPendingResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *ProcessPaymentGatewayPendingResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayPendingResponse) UnmarshalJSON(data []byte) error {
	type embed ProcessPaymentGatewayPendingResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayPendingResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayPendingResponse) MarshalJSON() ([]byte, error) {
	type embed ProcessPaymentGatewayPendingResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *ProcessPaymentGatewayPendingResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayRequest struct {
	Type     string
	Document *ProcessPaymentGatewayRequestDocument
	HTML     *ProcessPaymentGatewayRequestHTML
}

func (p *ProcessPaymentGatewayRequest) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *ProcessPaymentGatewayRequest) GetDocument() *ProcessPaymentGatewayRequestDocument {
	if p == nil {
		return nil
	}
	return p.Document
}

func (p *ProcessPaymentGatewayRequest) GetHTML() *ProcessPaymentGatewayRequestHTML {
	if p == nil {
		return nil
	}
	return p.HTML
}

func (p *ProcessPaymentGatewayRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", p)
	}
	switch unmarshaler.Type {
	case "document":
		value := new(ProcessPaymentGatewayRequestDocument)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Document = value
	case "html":
		value := new(ProcessPaymentGatewayRequestHTML)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.HTML = value
	}
	return nil
}

func (p ProcessPaymentGatewayRequest) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.Document != nil {
		return internal.MarshalJSONWithExtraProperty(p.Document, "type", "document")
	}
	if p.HTML != nil {
		return internal.MarshalJSONWithExtraProperty(p.HTML, "type", "html")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type ProcessPaymentGatewayRequestVisitor interface {
	VisitDocument(*ProcessPaymentGatewayRequestDocument) error
	VisitHTML(*ProcessPaymentGatewayRequestHTML) error
}

func (p *ProcessPaymentGatewayRequest) Accept(visitor ProcessPaymentGatewayRequestVisitor) error {
	if p.Document != nil {
		return visitor.VisitDocument(p.Document)
	}
	if p.HTML != nil {
		return visitor.VisitHTML(p.HTML)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *ProcessPaymentGatewayRequest) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.Document != nil {
		fields = append(fields, "document")
	}
	if p.HTML != nil {
		fields = append(fields, "html")
	}
	if len(fields) == 0 {
		if p.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Type)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Type != "" {
		field := fields[0]
		if p.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Type,
				p,
			)
		}
	}
	return nil
}

type ProcessPaymentGatewayRequestDocument struct {
	// The invoice document PDF to extract the payment gateway from. Must be in base64 format or a publicly accessible URL.
	Document string `json:"document" url:"document"`
	// The details of the card to use for the payment
	CardDetails *ProcessPaymentGatewayCardDetails `json:"cardDetails,omitempty" url:"cardDetails,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayRequestDocument) GetDocument() string {
	if p == nil {
		return ""
	}
	return p.Document
}

func (p *ProcessPaymentGatewayRequestDocument) GetCardDetails() *ProcessPaymentGatewayCardDetails {
	if p == nil {
		return nil
	}
	return p.CardDetails
}

func (p *ProcessPaymentGatewayRequestDocument) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayRequestDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayRequestDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayRequestDocument(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayRequestDocument) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayRequestHTML struct {
	// The HTML from an email to extract the payment gateway from
	HTML string `json:"html" url:"html"`
	// The details of the card to use for the payment
	CardDetails *ProcessPaymentGatewayCardDetails `json:"cardDetails,omitempty" url:"cardDetails,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewayRequestHTML) GetHTML() string {
	if p == nil {
		return ""
	}
	return p.HTML
}

func (p *ProcessPaymentGatewayRequestHTML) GetCardDetails() *ProcessPaymentGatewayCardDetails {
	if p == nil {
		return nil
	}
	return p.CardDetails
}

func (p *ProcessPaymentGatewayRequestHTML) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewayRequestHTML) UnmarshalJSON(data []byte) error {
	type unmarshaler ProcessPaymentGatewayRequestHTML
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProcessPaymentGatewayRequestHTML(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewayRequestHTML) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessPaymentGatewayResponse struct {
	JobStatus string
	Pending   *ProcessPaymentGatewayPendingResponse
	Success   *ProcessPaymentGatewaySuccessResponse
	Failed    *ProcessPaymentGatewayFailedResponse
}

func (p *ProcessPaymentGatewayResponse) GetJobStatus() string {
	if p == nil {
		return ""
	}
	return p.JobStatus
}

func (p *ProcessPaymentGatewayResponse) GetPending() *ProcessPaymentGatewayPendingResponse {
	if p == nil {
		return nil
	}
	return p.Pending
}

func (p *ProcessPaymentGatewayResponse) GetSuccess() *ProcessPaymentGatewaySuccessResponse {
	if p == nil {
		return nil
	}
	return p.Success
}

func (p *ProcessPaymentGatewayResponse) GetFailed() *ProcessPaymentGatewayFailedResponse {
	if p == nil {
		return nil
	}
	return p.Failed
}

func (p *ProcessPaymentGatewayResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		JobStatus string `json:"jobStatus"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.JobStatus = unmarshaler.JobStatus
	if unmarshaler.JobStatus == "" {
		return fmt.Errorf("%T did not include discriminant jobStatus", p)
	}
	switch unmarshaler.JobStatus {
	case "pending":
		value := new(ProcessPaymentGatewayPendingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Pending = value
	case "success":
		value := new(ProcessPaymentGatewaySuccessResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Success = value
	case "failed":
		value := new(ProcessPaymentGatewayFailedResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Failed = value
	}
	return nil
}

func (p ProcessPaymentGatewayResponse) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.Pending != nil {
		return internal.MarshalJSONWithExtraProperty(p.Pending, "jobStatus", "pending")
	}
	if p.Success != nil {
		return internal.MarshalJSONWithExtraProperty(p.Success, "jobStatus", "success")
	}
	if p.Failed != nil {
		return internal.MarshalJSONWithExtraProperty(p.Failed, "jobStatus", "failed")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type ProcessPaymentGatewayResponseVisitor interface {
	VisitPending(*ProcessPaymentGatewayPendingResponse) error
	VisitSuccess(*ProcessPaymentGatewaySuccessResponse) error
	VisitFailed(*ProcessPaymentGatewayFailedResponse) error
}

func (p *ProcessPaymentGatewayResponse) Accept(visitor ProcessPaymentGatewayResponseVisitor) error {
	if p.Pending != nil {
		return visitor.VisitPending(p.Pending)
	}
	if p.Success != nil {
		return visitor.VisitSuccess(p.Success)
	}
	if p.Failed != nil {
		return visitor.VisitFailed(p.Failed)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *ProcessPaymentGatewayResponse) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.Pending != nil {
		fields = append(fields, "pending")
	}
	if p.Success != nil {
		fields = append(fields, "success")
	}
	if p.Failed != nil {
		fields = append(fields, "failed")
	}
	if len(fields) == 0 {
		if p.JobStatus != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.JobStatus)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.JobStatus != "" {
		field := fields[0]
		if p.JobStatus != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.JobStatus,
				p,
			)
		}
	}
	return nil
}

type ProcessPaymentGatewaySuccessResponse struct {
	// The job ID of the payment gateway processing job
	JobID string `json:"jobId" url:"jobId"`
	// The URL of the receipt that was downloaded from the payment gateway
	ReceiptURL *string `json:"receiptUrl,omitempty" url:"receiptUrl,omitempty"`
	// The invoice amount detected from the payment gateway
	InvoiceAmount *float64 `json:"invoiceAmount,omitempty" url:"invoiceAmount,omitempty"`
	// The amount displayed on the payment gateway (may include fees)
	GatewayAmount *float64 `json:"gatewayAmount,omitempty" url:"gatewayAmount,omitempty"`
	// The vendor name detected from the payment gateway
	VendorName *string `json:"vendorName,omitempty" url:"vendorName,omitempty"`
	// List of payment gateway attempts for this job
	Attempts []*PaymentGatewayAttempt `json:"attempts,omitempty" url:"attempts,omitempty"`
	// The timestamp when the job was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// The timestamp when the job was last updated
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessPaymentGatewaySuccessResponse) GetJobID() string {
	if p == nil {
		return ""
	}
	return p.JobID
}

func (p *ProcessPaymentGatewaySuccessResponse) GetReceiptURL() *string {
	if p == nil {
		return nil
	}
	return p.ReceiptURL
}

func (p *ProcessPaymentGatewaySuccessResponse) GetInvoiceAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.InvoiceAmount
}

func (p *ProcessPaymentGatewaySuccessResponse) GetGatewayAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.GatewayAmount
}

func (p *ProcessPaymentGatewaySuccessResponse) GetVendorName() *string {
	if p == nil {
		return nil
	}
	return p.VendorName
}

func (p *ProcessPaymentGatewaySuccessResponse) GetAttempts() []*PaymentGatewayAttempt {
	if p == nil {
		return nil
	}
	return p.Attempts
}

func (p *ProcessPaymentGatewaySuccessResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *ProcessPaymentGatewaySuccessResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *ProcessPaymentGatewaySuccessResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessPaymentGatewaySuccessResponse) UnmarshalJSON(data []byte) error {
	type embed ProcessPaymentGatewaySuccessResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProcessPaymentGatewaySuccessResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessPaymentGatewaySuccessResponse) MarshalJSON() ([]byte, error) {
	type embed ProcessPaymentGatewaySuccessResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *ProcessPaymentGatewaySuccessResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type SearchPaymentGatewayProcessJobsResponse struct {
	// List of payment gateway process jobs matching the search criteria
	Jobs []*ProcessPaymentGatewayResponse `json:"jobs,omitempty" url:"jobs,omitempty"`
	// Whether there are more jobs available beyond the current page
	HasMore bool `json:"hasMore" url:"hasMore"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchPaymentGatewayProcessJobsResponse) GetJobs() []*ProcessPaymentGatewayResponse {
	if s == nil {
		return nil
	}
	return s.Jobs
}

func (s *SearchPaymentGatewayProcessJobsResponse) GetHasMore() bool {
	if s == nil {
		return false
	}
	return s.HasMore
}

func (s *SearchPaymentGatewayProcessJobsResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchPaymentGatewayProcessJobsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchPaymentGatewayProcessJobsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchPaymentGatewayProcessJobsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchPaymentGatewayProcessJobsResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchPaymentGatewayValidationJobsResponse struct {
	// List of payment gateway validation jobs matching the search criteria
	Jobs []*ValidatePaymentGatewayResponse `json:"jobs,omitempty" url:"jobs,omitempty"`
	// Whether there are more jobs available beyond the current page
	HasMore bool `json:"hasMore" url:"hasMore"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchPaymentGatewayValidationJobsResponse) GetJobs() []*ValidatePaymentGatewayResponse {
	if s == nil {
		return nil
	}
	return s.Jobs
}

func (s *SearchPaymentGatewayValidationJobsResponse) GetHasMore() bool {
	if s == nil {
		return false
	}
	return s.HasMore
}

func (s *SearchPaymentGatewayValidationJobsResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchPaymentGatewayValidationJobsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchPaymentGatewayValidationJobsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchPaymentGatewayValidationJobsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchPaymentGatewayValidationJobsResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ValidatePaymentGatewayCardAcceptance string

const (
	ValidatePaymentGatewayCardAcceptanceAccepted    ValidatePaymentGatewayCardAcceptance = "ACCEPTED"
	ValidatePaymentGatewayCardAcceptanceNotAccepted ValidatePaymentGatewayCardAcceptance = "NOT_ACCEPTED"
	ValidatePaymentGatewayCardAcceptanceUnknown     ValidatePaymentGatewayCardAcceptance = "UNKNOWN"
)

func NewValidatePaymentGatewayCardAcceptanceFromString(s string) (ValidatePaymentGatewayCardAcceptance, error) {
	switch s {
	case "ACCEPTED":
		return ValidatePaymentGatewayCardAcceptanceAccepted, nil
	case "NOT_ACCEPTED":
		return ValidatePaymentGatewayCardAcceptanceNotAccepted, nil
	case "UNKNOWN":
		return ValidatePaymentGatewayCardAcceptanceUnknown, nil
	}
	var t ValidatePaymentGatewayCardAcceptance
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v ValidatePaymentGatewayCardAcceptance) Ptr() *ValidatePaymentGatewayCardAcceptance {
	return &v
}

type ValidatePaymentGatewayCardFee struct {
	Type       string
	Percentage *ValidatePaymentGatewayCardFeePercentage
	Flat       *ValidatePaymentGatewayCardFeeFlat
	None       *ValidatePaymentGatewayCardFeeNone
}

func (v *ValidatePaymentGatewayCardFee) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *ValidatePaymentGatewayCardFee) GetPercentage() *ValidatePaymentGatewayCardFeePercentage {
	if v == nil {
		return nil
	}
	return v.Percentage
}

func (v *ValidatePaymentGatewayCardFee) GetFlat() *ValidatePaymentGatewayCardFeeFlat {
	if v == nil {
		return nil
	}
	return v.Flat
}

func (v *ValidatePaymentGatewayCardFee) GetNone() *ValidatePaymentGatewayCardFeeNone {
	if v == nil {
		return nil
	}
	return v.None
}

func (v *ValidatePaymentGatewayCardFee) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	v.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", v)
	}
	switch unmarshaler.Type {
	case "percentage":
		value := new(ValidatePaymentGatewayCardFeePercentage)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Percentage = value
	case "flat":
		value := new(ValidatePaymentGatewayCardFeeFlat)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Flat = value
	case "none":
		value := new(ValidatePaymentGatewayCardFeeNone)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.None = value
	}
	return nil
}

func (v ValidatePaymentGatewayCardFee) MarshalJSON() ([]byte, error) {
	if err := v.validate(); err != nil {
		return nil, err
	}
	if v.Percentage != nil {
		return internal.MarshalJSONWithExtraProperty(v.Percentage, "type", "percentage")
	}
	if v.Flat != nil {
		return internal.MarshalJSONWithExtraProperty(v.Flat, "type", "flat")
	}
	if v.None != nil {
		return internal.MarshalJSONWithExtraProperty(v.None, "type", "none")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", v)
}

type ValidatePaymentGatewayCardFeeVisitor interface {
	VisitPercentage(*ValidatePaymentGatewayCardFeePercentage) error
	VisitFlat(*ValidatePaymentGatewayCardFeeFlat) error
	VisitNone(*ValidatePaymentGatewayCardFeeNone) error
}

func (v *ValidatePaymentGatewayCardFee) Accept(visitor ValidatePaymentGatewayCardFeeVisitor) error {
	if v.Percentage != nil {
		return visitor.VisitPercentage(v.Percentage)
	}
	if v.Flat != nil {
		return visitor.VisitFlat(v.Flat)
	}
	if v.None != nil {
		return visitor.VisitNone(v.None)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", v)
}

func (v *ValidatePaymentGatewayCardFee) validate() error {
	if v == nil {
		return fmt.Errorf("type %T is nil", v)
	}
	var fields []string
	if v.Percentage != nil {
		fields = append(fields, "percentage")
	}
	if v.Flat != nil {
		fields = append(fields, "flat")
	}
	if v.None != nil {
		fields = append(fields, "none")
	}
	if len(fields) == 0 {
		if v.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", v, v.Type)
		}
		return fmt.Errorf("type %T is empty", v)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", v, fields)
	}
	if v.Type != "" {
		field := fields[0]
		if v.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				v,
				v.Type,
				v,
			)
		}
	}
	return nil
}

type ValidatePaymentGatewayCardFeeFlat struct {
	// The fee amount in major units of the invoice currency. For example, if the fee is a flat $2.50, set this to 2.5.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayCardFeeFlat) GetValue() float64 {
	if v == nil {
		return 0
	}
	return v.Value
}

func (v *ValidatePaymentGatewayCardFeeFlat) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayCardFeeFlat) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayCardFeeFlat
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayCardFeeFlat(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayCardFeeFlat) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayCardFeeNone struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayCardFeeNone) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayCardFeeNone) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayCardFeeNone
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayCardFeeNone(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayCardFeeNone) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayCardFeePercentage struct {
	// The fee percentage in bps. For example, if the fee is 2.5% and the payment amount is $100, set this to 250.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayCardFeePercentage) GetValue() float64 {
	if v == nil {
		return 0
	}
	return v.Value
}

func (v *ValidatePaymentGatewayCardFeePercentage) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayCardFeePercentage) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayCardFeePercentage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayCardFeePercentage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayCardFeePercentage) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayCardResponse struct {
	// Whether the payment gateway accepts card payments
	Eligibility ValidatePaymentGatewayCardAcceptance `json:"eligibility" url:"eligibility"`
	// The fee that was extracted from the gateway
	Fee *ValidatePaymentGatewayCardFee `json:"fee,omitempty" url:"fee,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayCardResponse) GetEligibility() ValidatePaymentGatewayCardAcceptance {
	if v == nil {
		return ""
	}
	return v.Eligibility
}

func (v *ValidatePaymentGatewayCardResponse) GetFee() *ValidatePaymentGatewayCardFee {
	if v == nil {
		return nil
	}
	return v.Fee
}

func (v *ValidatePaymentGatewayCardResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayCardResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayCardResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayCardResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayCardResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayFailedResponse struct {
	// The job ID of the payment gateway validation job
	JobID string `json:"jobId" url:"jobId"`
	// The error that occurred during the payment gateway validation job
	ErrorType PaymentGatewayError `json:"errorType" url:"errorType"`
	// The error message that occurred during the payment gateway validation job
	ErrorMessage *string `json:"errorMessage,omitempty" url:"errorMessage,omitempty"`
	// The timestamp when the job was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// The timestamp when the job was last updated
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayFailedResponse) GetJobID() string {
	if v == nil {
		return ""
	}
	return v.JobID
}

func (v *ValidatePaymentGatewayFailedResponse) GetErrorType() PaymentGatewayError {
	if v == nil {
		return ""
	}
	return v.ErrorType
}

func (v *ValidatePaymentGatewayFailedResponse) GetErrorMessage() *string {
	if v == nil {
		return nil
	}
	return v.ErrorMessage
}

func (v *ValidatePaymentGatewayFailedResponse) GetCreatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.CreatedAt
}

func (v *ValidatePaymentGatewayFailedResponse) GetUpdatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.UpdatedAt
}

func (v *ValidatePaymentGatewayFailedResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayFailedResponse) UnmarshalJSON(data []byte) error {
	type embed ValidatePaymentGatewayFailedResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayFailedResponse(unmarshaler.embed)
	v.CreatedAt = unmarshaler.CreatedAt.Time()
	v.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayFailedResponse) MarshalJSON() ([]byte, error) {
	type embed ValidatePaymentGatewayFailedResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*v),
		CreatedAt: internal.NewDateTime(v.CreatedAt),
		UpdatedAt: internal.NewDateTime(v.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (v *ValidatePaymentGatewayFailedResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayPendingResponse struct {
	// The job ID of the payment gateway validation job
	JobID string `json:"jobId" url:"jobId"`
	// The timestamp when the job was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// The timestamp when the job was last updated
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayPendingResponse) GetJobID() string {
	if v == nil {
		return ""
	}
	return v.JobID
}

func (v *ValidatePaymentGatewayPendingResponse) GetCreatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.CreatedAt
}

func (v *ValidatePaymentGatewayPendingResponse) GetUpdatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.UpdatedAt
}

func (v *ValidatePaymentGatewayPendingResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayPendingResponse) UnmarshalJSON(data []byte) error {
	type embed ValidatePaymentGatewayPendingResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayPendingResponse(unmarshaler.embed)
	v.CreatedAt = unmarshaler.CreatedAt.Time()
	v.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayPendingResponse) MarshalJSON() ([]byte, error) {
	type embed ValidatePaymentGatewayPendingResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*v),
		CreatedAt: internal.NewDateTime(v.CreatedAt),
		UpdatedAt: internal.NewDateTime(v.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (v *ValidatePaymentGatewayPendingResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayRequest struct {
	Type     string
	Document *ValidatePaymentGatewayRequestDocument
	HTML     *ValidatePaymentGatewayRequestHTML
}

func (v *ValidatePaymentGatewayRequest) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *ValidatePaymentGatewayRequest) GetDocument() *ValidatePaymentGatewayRequestDocument {
	if v == nil {
		return nil
	}
	return v.Document
}

func (v *ValidatePaymentGatewayRequest) GetHTML() *ValidatePaymentGatewayRequestHTML {
	if v == nil {
		return nil
	}
	return v.HTML
}

func (v *ValidatePaymentGatewayRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	v.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", v)
	}
	switch unmarshaler.Type {
	case "document":
		value := new(ValidatePaymentGatewayRequestDocument)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Document = value
	case "html":
		value := new(ValidatePaymentGatewayRequestHTML)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.HTML = value
	}
	return nil
}

func (v ValidatePaymentGatewayRequest) MarshalJSON() ([]byte, error) {
	if err := v.validate(); err != nil {
		return nil, err
	}
	if v.Document != nil {
		return internal.MarshalJSONWithExtraProperty(v.Document, "type", "document")
	}
	if v.HTML != nil {
		return internal.MarshalJSONWithExtraProperty(v.HTML, "type", "html")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", v)
}

type ValidatePaymentGatewayRequestVisitor interface {
	VisitDocument(*ValidatePaymentGatewayRequestDocument) error
	VisitHTML(*ValidatePaymentGatewayRequestHTML) error
}

func (v *ValidatePaymentGatewayRequest) Accept(visitor ValidatePaymentGatewayRequestVisitor) error {
	if v.Document != nil {
		return visitor.VisitDocument(v.Document)
	}
	if v.HTML != nil {
		return visitor.VisitHTML(v.HTML)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", v)
}

func (v *ValidatePaymentGatewayRequest) validate() error {
	if v == nil {
		return fmt.Errorf("type %T is nil", v)
	}
	var fields []string
	if v.Document != nil {
		fields = append(fields, "document")
	}
	if v.HTML != nil {
		fields = append(fields, "html")
	}
	if len(fields) == 0 {
		if v.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", v, v.Type)
		}
		return fmt.Errorf("type %T is empty", v)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", v, fields)
	}
	if v.Type != "" {
		field := fields[0]
		if v.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				v,
				v.Type,
				v,
			)
		}
	}
	return nil
}

type ValidatePaymentGatewayRequestDocument struct {
	// The invoice document PDF to extract the payment gateway from. Must be in base64 format or a publicly accessible URL.
	Document string `json:"document" url:"document"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayRequestDocument) GetDocument() string {
	if v == nil {
		return ""
	}
	return v.Document
}

func (v *ValidatePaymentGatewayRequestDocument) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayRequestDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayRequestDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayRequestDocument(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayRequestDocument) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayRequestHTML struct {
	// The HTML from an email to extract the payment gateway from
	HTML string `json:"html" url:"html"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewayRequestHTML) GetHTML() string {
	if v == nil {
		return ""
	}
	return v.HTML
}

func (v *ValidatePaymentGatewayRequestHTML) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewayRequestHTML) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidatePaymentGatewayRequestHTML
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidatePaymentGatewayRequestHTML(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewayRequestHTML) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidatePaymentGatewayResponse struct {
	JobStatus string
	Pending   *ValidatePaymentGatewayPendingResponse
	Success   *ValidatePaymentGatewaySuccessResponse
	Failed    *ValidatePaymentGatewayFailedResponse
}

func (v *ValidatePaymentGatewayResponse) GetJobStatus() string {
	if v == nil {
		return ""
	}
	return v.JobStatus
}

func (v *ValidatePaymentGatewayResponse) GetPending() *ValidatePaymentGatewayPendingResponse {
	if v == nil {
		return nil
	}
	return v.Pending
}

func (v *ValidatePaymentGatewayResponse) GetSuccess() *ValidatePaymentGatewaySuccessResponse {
	if v == nil {
		return nil
	}
	return v.Success
}

func (v *ValidatePaymentGatewayResponse) GetFailed() *ValidatePaymentGatewayFailedResponse {
	if v == nil {
		return nil
	}
	return v.Failed
}

func (v *ValidatePaymentGatewayResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		JobStatus string `json:"jobStatus"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	v.JobStatus = unmarshaler.JobStatus
	if unmarshaler.JobStatus == "" {
		return fmt.Errorf("%T did not include discriminant jobStatus", v)
	}
	switch unmarshaler.JobStatus {
	case "pending":
		value := new(ValidatePaymentGatewayPendingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Pending = value
	case "success":
		value := new(ValidatePaymentGatewaySuccessResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Success = value
	case "failed":
		value := new(ValidatePaymentGatewayFailedResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Failed = value
	}
	return nil
}

func (v ValidatePaymentGatewayResponse) MarshalJSON() ([]byte, error) {
	if err := v.validate(); err != nil {
		return nil, err
	}
	if v.Pending != nil {
		return internal.MarshalJSONWithExtraProperty(v.Pending, "jobStatus", "pending")
	}
	if v.Success != nil {
		return internal.MarshalJSONWithExtraProperty(v.Success, "jobStatus", "success")
	}
	if v.Failed != nil {
		return internal.MarshalJSONWithExtraProperty(v.Failed, "jobStatus", "failed")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", v)
}

type ValidatePaymentGatewayResponseVisitor interface {
	VisitPending(*ValidatePaymentGatewayPendingResponse) error
	VisitSuccess(*ValidatePaymentGatewaySuccessResponse) error
	VisitFailed(*ValidatePaymentGatewayFailedResponse) error
}

func (v *ValidatePaymentGatewayResponse) Accept(visitor ValidatePaymentGatewayResponseVisitor) error {
	if v.Pending != nil {
		return visitor.VisitPending(v.Pending)
	}
	if v.Success != nil {
		return visitor.VisitSuccess(v.Success)
	}
	if v.Failed != nil {
		return visitor.VisitFailed(v.Failed)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", v)
}

func (v *ValidatePaymentGatewayResponse) validate() error {
	if v == nil {
		return fmt.Errorf("type %T is nil", v)
	}
	var fields []string
	if v.Pending != nil {
		fields = append(fields, "pending")
	}
	if v.Success != nil {
		fields = append(fields, "success")
	}
	if v.Failed != nil {
		fields = append(fields, "failed")
	}
	if len(fields) == 0 {
		if v.JobStatus != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", v, v.JobStatus)
		}
		return fmt.Errorf("type %T is empty", v)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", v, fields)
	}
	if v.JobStatus != "" {
		field := fields[0]
		if v.JobStatus != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				v,
				v.JobStatus,
				v,
			)
		}
	}
	return nil
}

type ValidatePaymentGatewaySuccessResponse struct {
	// The job ID of the payment gateway validation job
	JobID string `json:"jobId" url:"jobId"`
	// The payment gateway URL that was found in the document
	PaymentGatewayURL *string `json:"paymentGatewayUrl,omitempty" url:"paymentGatewayUrl,omitempty"`
	// Data on the card payments that were extracted from the gateway
	Card *ValidatePaymentGatewayCardResponse `json:"card,omitempty" url:"card,omitempty"`
	// The invoice amount detected from the payment gateway
	InvoiceAmount *float64 `json:"invoiceAmount,omitempty" url:"invoiceAmount,omitempty"`
	// The amount displayed on the payment gateway (may include fees)
	GatewayAmount *float64 `json:"gatewayAmount,omitempty" url:"gatewayAmount,omitempty"`
	// The vendor name detected from the payment gateway
	VendorName *string `json:"vendorName,omitempty" url:"vendorName,omitempty"`
	// The timestamp when the job was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// The timestamp when the job was last updated
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidatePaymentGatewaySuccessResponse) GetJobID() string {
	if v == nil {
		return ""
	}
	return v.JobID
}

func (v *ValidatePaymentGatewaySuccessResponse) GetPaymentGatewayURL() *string {
	if v == nil {
		return nil
	}
	return v.PaymentGatewayURL
}

func (v *ValidatePaymentGatewaySuccessResponse) GetCard() *ValidatePaymentGatewayCardResponse {
	if v == nil {
		return nil
	}
	return v.Card
}

func (v *ValidatePaymentGatewaySuccessResponse) GetInvoiceAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.InvoiceAmount
}

func (v *ValidatePaymentGatewaySuccessResponse) GetGatewayAmount() *float64 {
	if v == nil {
		return nil
	}
	return v.GatewayAmount
}

func (v *ValidatePaymentGatewaySuccessResponse) GetVendorName() *string {
	if v == nil {
		return nil
	}
	return v.VendorName
}

func (v *ValidatePaymentGatewaySuccessResponse) GetCreatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.CreatedAt
}

func (v *ValidatePaymentGatewaySuccessResponse) GetUpdatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.UpdatedAt
}

func (v *ValidatePaymentGatewaySuccessResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidatePaymentGatewaySuccessResponse) UnmarshalJSON(data []byte) error {
	type embed ValidatePaymentGatewaySuccessResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = ValidatePaymentGatewaySuccessResponse(unmarshaler.embed)
	v.CreatedAt = unmarshaler.CreatedAt.Time()
	v.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidatePaymentGatewaySuccessResponse) MarshalJSON() ([]byte, error) {
	type embed ValidatePaymentGatewaySuccessResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*v),
		CreatedAt: internal.NewDateTime(v.CreatedAt),
		UpdatedAt: internal.NewDateTime(v.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (v *ValidatePaymentGatewaySuccessResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
