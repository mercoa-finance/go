// This file was auto-generated by Fern from our API Definition.

package mercoa

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/mercoa-finance/go/internal"
)

type BulkEntityCreationWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// A list of bulk entity creation responses.
	Data []*BulkEntityCreationFromObjectResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkEntityCreationWebhook) GetEventType() string {
	if b == nil {
		return ""
	}
	return b.EventType
}

func (b *BulkEntityCreationWebhook) GetData() []*BulkEntityCreationFromObjectResponse {
	if b == nil {
		return nil
	}
	return b.Data
}

func (b *BulkEntityCreationWebhook) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkEntityCreationWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkEntityCreationWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkEntityCreationWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkEntityCreationWebhook) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkInvoiceCreationWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// A list of bulk invoice creation responses.
	Data []*BulkInvoiceCreationFromObjectResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkInvoiceCreationWebhook) GetEventType() string {
	if b == nil {
		return ""
	}
	return b.EventType
}

func (b *BulkInvoiceCreationWebhook) GetData() []*BulkInvoiceCreationFromObjectResponse {
	if b == nil {
		return nil
	}
	return b.Data
}

func (b *BulkInvoiceCreationWebhook) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkInvoiceCreationWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkInvoiceCreationWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkInvoiceCreationWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkInvoiceCreationWebhook) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CounterpartyEventWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// The ID of the entity that owns the counterparty relationship
	EntityID EntityID `json:"entityId" url:"entityId"`
	// The ID of the counterparty
	CounterpartyID EntityID `json:"counterpartyId" url:"counterpartyId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartyEventWebhook) GetEventType() string {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *CounterpartyEventWebhook) GetEntityID() EntityID {
	if c == nil {
		return ""
	}
	return c.EntityID
}

func (c *CounterpartyEventWebhook) GetCounterpartyID() EntityID {
	if c == nil {
		return ""
	}
	return c.CounterpartyID
}

func (c *CounterpartyEventWebhook) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartyEventWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartyEventWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartyEventWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartyEventWebhook) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CounterpartyWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// A list of IDs for the payees involved.
	PayeeID []EntityID `json:"payeeId,omitempty" url:"payeeId,omitempty"`
	// A list of IDs for the payors involved.
	PayorID []EntityID `json:"payorId,omitempty" url:"payorId,omitempty"`
	// User who initiated the change.
	User *EntityUserResponse `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartyWebhook) GetEventType() string {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *CounterpartyWebhook) GetPayeeID() []EntityID {
	if c == nil {
		return nil
	}
	return c.PayeeID
}

func (c *CounterpartyWebhook) GetPayorID() []EntityID {
	if c == nil {
		return nil
	}
	return c.PayorID
}

func (c *CounterpartyWebhook) GetUser() *EntityUserResponse {
	if c == nil {
		return nil
	}
	return c.User
}

func (c *CounterpartyWebhook) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartyWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartyWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartyWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartyWebhook) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type EntityMetadataUpdatedWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// The ID of the entity that was updated.
	EntityID EntityID `json:"entityId" url:"entityId"`
	// Foreign ID associated with the entity.
	ForeignID *string `json:"foreignId,omitempty" url:"foreignId,omitempty"`
	// The key of the metadata that was updated.
	Key string `json:"key" url:"key"`
	// A list of new values for the metadata.
	Value []string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityMetadataUpdatedWebhook) GetEventType() string {
	if e == nil {
		return ""
	}
	return e.EventType
}

func (e *EntityMetadataUpdatedWebhook) GetEntityID() EntityID {
	if e == nil {
		return ""
	}
	return e.EntityID
}

func (e *EntityMetadataUpdatedWebhook) GetForeignID() *string {
	if e == nil {
		return nil
	}
	return e.ForeignID
}

func (e *EntityMetadataUpdatedWebhook) GetKey() string {
	if e == nil {
		return ""
	}
	return e.Key
}

func (e *EntityMetadataUpdatedWebhook) GetValue() []string {
	if e == nil {
		return nil
	}
	return e.Value
}

func (e *EntityMetadataUpdatedWebhook) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityMetadataUpdatedWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityMetadataUpdatedWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityMetadataUpdatedWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityMetadataUpdatedWebhook) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityStatusChangedWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// The entity involved in the event.
	Entity *EntityResponse `json:"entity,omitempty" url:"entity,omitempty"`
	// The ID of the entity that updated the entity. This will be different from the entityId if the entity was updated by a different entity (e.g. a C2 updating a C3).
	// If the entity was created or updated by an admin, this will be 'admin'.
	UpdatedByEntityID EntityID `json:"updatedByEntityId" url:"updatedByEntityId"`
	// The new status of the entity.
	NewStatus string `json:"newStatus" url:"newStatus"`
	// The previous status of the entity.
	PreviousStatus string `json:"previousStatus" url:"previousStatus"`
	// User who initiated the change.
	User *EntityUserResponse `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityStatusChangedWebhook) GetEventType() string {
	if e == nil {
		return ""
	}
	return e.EventType
}

func (e *EntityStatusChangedWebhook) GetEntity() *EntityResponse {
	if e == nil {
		return nil
	}
	return e.Entity
}

func (e *EntityStatusChangedWebhook) GetUpdatedByEntityID() EntityID {
	if e == nil {
		return ""
	}
	return e.UpdatedByEntityID
}

func (e *EntityStatusChangedWebhook) GetNewStatus() string {
	if e == nil {
		return ""
	}
	return e.NewStatus
}

func (e *EntityStatusChangedWebhook) GetPreviousStatus() string {
	if e == nil {
		return ""
	}
	return e.PreviousStatus
}

func (e *EntityStatusChangedWebhook) GetUser() *EntityUserResponse {
	if e == nil {
		return nil
	}
	return e.User
}

func (e *EntityStatusChangedWebhook) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityStatusChangedWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityStatusChangedWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityStatusChangedWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityStatusChangedWebhook) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// The entity involved in the event.
	Entity *EntityResponse `json:"entity,omitempty" url:"entity,omitempty"`
	// The ID of the entity that updated the entity. This will be different from the entityId if the entity was updated by a different entity (e.g. a C2 updating a C3).
	// If the entity was created or updated by an admin, this will be 'admin'.
	UpdatedByEntityID EntityID `json:"updatedByEntityId" url:"updatedByEntityId"`
	// User who initiated the change.
	User *EntityUserResponse `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityWebhook) GetEventType() string {
	if e == nil {
		return ""
	}
	return e.EventType
}

func (e *EntityWebhook) GetEntity() *EntityResponse {
	if e == nil {
		return nil
	}
	return e.Entity
}

func (e *EntityWebhook) GetUpdatedByEntityID() EntityID {
	if e == nil {
		return ""
	}
	return e.UpdatedByEntityID
}

func (e *EntityWebhook) GetUser() *EntityUserResponse {
	if e == nil {
		return nil
	}
	return e.User
}

func (e *EntityWebhook) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityWebhook) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type InvoiceCollectionEventWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// The invoice involved in the event.
	Invoice *InvoiceResponse `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Email message related to the invoice collection.
	Email *EmailMessageResponse `json:"email,omitempty" url:"email,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceCollectionEventWebhook) GetEventType() string {
	if i == nil {
		return ""
	}
	return i.EventType
}

func (i *InvoiceCollectionEventWebhook) GetInvoice() *InvoiceResponse {
	if i == nil {
		return nil
	}
	return i.Invoice
}

func (i *InvoiceCollectionEventWebhook) GetEmail() *EmailMessageResponse {
	if i == nil {
		return nil
	}
	return i.Email
}

func (i *InvoiceCollectionEventWebhook) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceCollectionEventWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceCollectionEventWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceCollectionEventWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceCollectionEventWebhook) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InvoiceEmailWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// If an invoice was created from the email, this will be present.
	Invoice *InvoiceResponse `json:"invoice,omitempty" url:"invoice,omitempty"`
	// If an existing invoice already exists for the email, this will be present.
	ExistingInvoiceID *InvoiceID `json:"existingInvoiceId,omitempty" url:"existingInvoiceId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceEmailWebhook) GetEventType() string {
	if i == nil {
		return ""
	}
	return i.EventType
}

func (i *InvoiceEmailWebhook) GetInvoice() *InvoiceResponse {
	if i == nil {
		return nil
	}
	return i.Invoice
}

func (i *InvoiceEmailWebhook) GetExistingInvoiceID() *InvoiceID {
	if i == nil {
		return nil
	}
	return i.ExistingInvoiceID
}

func (i *InvoiceEmailWebhook) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceEmailWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceEmailWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceEmailWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceEmailWebhook) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InvoiceStatusChangedWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// The invoice involved in the event.
	Invoice *InvoiceResponse `json:"invoice,omitempty" url:"invoice,omitempty"`
	// User who initiated the change.
	User *EntityUserResponse `json:"user,omitempty" url:"user,omitempty"`
	// The new status of the invoice.
	NewStatus string `json:"newStatus" url:"newStatus"`
	// The previous status of the invoice.
	PreviousStatus string `json:"previousStatus" url:"previousStatus"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceStatusChangedWebhook) GetEventType() string {
	if i == nil {
		return ""
	}
	return i.EventType
}

func (i *InvoiceStatusChangedWebhook) GetInvoice() *InvoiceResponse {
	if i == nil {
		return nil
	}
	return i.Invoice
}

func (i *InvoiceStatusChangedWebhook) GetUser() *EntityUserResponse {
	if i == nil {
		return nil
	}
	return i.User
}

func (i *InvoiceStatusChangedWebhook) GetNewStatus() string {
	if i == nil {
		return ""
	}
	return i.NewStatus
}

func (i *InvoiceStatusChangedWebhook) GetPreviousStatus() string {
	if i == nil {
		return ""
	}
	return i.PreviousStatus
}

func (i *InvoiceStatusChangedWebhook) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceStatusChangedWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceStatusChangedWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceStatusChangedWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceStatusChangedWebhook) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InvoiceWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// The invoice involved in the event.
	Invoice *InvoiceResponse `json:"invoice,omitempty" url:"invoice,omitempty"`
	// User who initiated the change.
	User *EntityUserResponse `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceWebhook) GetEventType() string {
	if i == nil {
		return ""
	}
	return i.EventType
}

func (i *InvoiceWebhook) GetInvoice() *InvoiceResponse {
	if i == nil {
		return nil
	}
	return i.Invoice
}

func (i *InvoiceWebhook) GetUser() *EntityUserResponse {
	if i == nil {
		return nil
	}
	return i.User
}

func (i *InvoiceWebhook) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceWebhook) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type PaymentMethodWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// ID of the entity that the payment method belongs to.
	EntityID EntityID `json:"entityId" url:"entityId"`
	// ID of the entity that created or updated the payment method.
	// This will be different from the entityId if the payment method was added by a different entity (e.g. a C2 creating a payment method for a C3).
	// If the payment method was created or updated by an admin, this will be 'admin'.
	UpdatedByEntityID EntityID `json:"updatedByEntityId" url:"updatedByEntityId"`
	// The payment method details.
	PaymentMethod *PaymentMethodResponse `json:"paymentMethod,omitempty" url:"paymentMethod,omitempty"`
	// Entity that the payment method belongs to.
	Entity *EntityResponse `json:"entity,omitempty" url:"entity,omitempty"`
	// User who initiated the change.
	User *EntityUserResponse `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentMethodWebhook) GetEventType() string {
	if p == nil {
		return ""
	}
	return p.EventType
}

func (p *PaymentMethodWebhook) GetEntityID() EntityID {
	if p == nil {
		return ""
	}
	return p.EntityID
}

func (p *PaymentMethodWebhook) GetUpdatedByEntityID() EntityID {
	if p == nil {
		return ""
	}
	return p.UpdatedByEntityID
}

func (p *PaymentMethodWebhook) GetPaymentMethod() *PaymentMethodResponse {
	if p == nil {
		return nil
	}
	return p.PaymentMethod
}

func (p *PaymentMethodWebhook) GetEntity() *EntityResponse {
	if p == nil {
		return nil
	}
	return p.Entity
}

func (p *PaymentMethodWebhook) GetUser() *EntityUserResponse {
	if p == nil {
		return nil
	}
	return p.User
}

func (p *PaymentMethodWebhook) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethodWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentMethodWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentMethodWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethodWebhook) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A transaction was created, completed, or failed
type TransactionWebhook struct {
	// The type of the event.
	EventType string `json:"eventType" url:"eventType"`
	// The transaction details.
	Transaction *TransactionResponse `json:"transaction,omitempty" url:"transaction,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransactionWebhook) GetEventType() string {
	if t == nil {
		return ""
	}
	return t.EventType
}

func (t *TransactionWebhook) GetTransaction() *TransactionResponse {
	if t == nil {
		return nil
	}
	return t.Transaction
}

func (t *TransactionWebhook) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransactionWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler TransactionWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransactionWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransactionWebhook) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
